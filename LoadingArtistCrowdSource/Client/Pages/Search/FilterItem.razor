<div class="dropdown">
	<button type="button" id="@($"{Field.Code}-btn-label")" class="@($"btn {(FilterData.FieldValues.Any(fv => !string.IsNullOrEmpty(fv.Code) && fv.Filtered) ? "btn-secondary" : "btn-light")} btn-sm dropdown-toggle")" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
		@dropdownText
	</button>
	<ul class="dropdown-menu checkbox-menu allow-focus" aria-labelledby="@($"{Field.Code}-btn-label")">

		@switch (Field.Type)
		{
			case CrowdSourcedFieldType.IntegerNumber:
			case CrowdSourcedFieldType.FreeformTextarea:
				<li class="dropdown-item-text">
					<div class="input-group">
						<InputText class="form-control" @bind-Value="FilterData.FieldValues[0].Code"></InputText>
						<button type="button" class="btn btn-sm bg-transparent" style="margin-left: -28px; z-index: 100;" @onclick="() => FilterData.FieldValues[0].Code = string.Empty" title="Click to clear search filter">
							<SemanticIcon Name="x" Title="Click to clear search filter" />
						</button>
					</div>
				</li>
				break;
			case CrowdSourcedFieldType.FreeformTextfield:
			default:
				<li class="dropdown-item-text">
					<div class="input-group">
						<input type="text" value="@_searchText" class="form-control form-control-sm" placeholder="Search..." @oninput="HandleSearchInput" />
						<button type="button" class="btn btn-sm bg-transparent" style="margin-left: -28px; z-index: 100;" @onclick="ClearSearchInput" >
							<SemanticIcon Name="x" Title="Click to clear search filter" />
						</button>
					</div>
				</li>
				<li class="dropdown-divider"></li>
				<InputRadioGroup TValue="SearchEntryOperator" Value="@FilterData.Operator" ValueExpression="() => FilterData.Operator" ValueChanged="OperatorDidChange">
					@foreach (var op in System.Enum.GetValues(typeof(SearchEntryOperator)).Cast<SearchEntryOperator>())
					{
						<li>
							<label>
								<InputRadio Value="op"></InputRadio>
								@op.ToString()
							</label>
						</li>
					}
				</InputRadioGroup>
				<li class="dropdown-divider"></li>
				@foreach (var option in _searchedOptions)
				{
					<li>
						<label>
							<InputCheckbox Value="option.Item1.Filtered" ValueExpression="() => option.Item1.Filtered" ValueChanged="(filtered) => OptionDidChange(option.Item1, filtered)"></InputCheckbox>
							@option.Item2.Text
						</label>
					</li>
				}
				break;
		}
	</ul>
</div>

@code {

	[Parameter]
	public ComicFieldViewModel Field { get; set; } = new ComicFieldViewModel();
	[Parameter]
	public SearchEntryViewModel FilterData { get; set; } = new SearchEntryViewModel();
	[Parameter]
	public EventCallback<SearchEntryViewModel>? FilterDataChanged { get; set; }

	private string? _searchText;
	private (SearchEntryOptionViewModel, CrowdSourcedFieldDefinitionOptionViewModel)[] _searchedOptions = new (SearchEntryOptionViewModel, CrowdSourcedFieldDefinitionOptionViewModel)[] { };

	private string dropdownText
	{
		get
		{
			switch (Field.Type)
			{
				case CrowdSourcedFieldType.IntegerNumber:
				case CrowdSourcedFieldType.FreeformTextarea:
					var fieldValue = FilterData.FieldValues.FirstOrDefault() ?? new SearchEntryOptionViewModel();
					if (!string.IsNullOrEmpty(fieldValue.Code) && fieldValue.Filtered)
					{
						return Field.Name + ": " + fieldValue.Code;
					}
					else
					{
						return "Any " + Field.Name;
					}
				case CrowdSourcedFieldType.FreeformTextfield:
					if (FilterData.FieldValues.Any(o => o.Filtered))
					{
						string values = string.Join(FilterData.Operator.Separator(), FilterData.FieldValues
							.Where(o => o.Filtered)
							.Select(o => o.Code));
						return $"{Field.Name}: {values}";
					}
					else
					{
						return "Any " + Field.Name;
					}
				default:
					if (FilterData.FieldValues.Zip(Field.Options).Any(o => o.First.Filtered))
					{
						string values = string.Join(FilterData.Operator.Separator(), FilterData.FieldValues.Zip(Field.Options)
							.Where(o => o.First.Filtered)
							.Select(o => o.Second.Text));
						return $"{Field.Name}: {values}";
					}
					else
					{
						return "Any " + Field.Name;
					}
			}
			
		}
	}

	protected override async Task OnInitializedAsync()
	{
		performSearch();
		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		performSearch();
		await base.OnParametersSetAsync();
	}

	private void HandleSearchInput(ChangeEventArgs e)
	{
		_searchText = e.Value as string;
		performSearch();
	}

	private void ClearSearchInput()
	{
		_searchText = "";
		performSearch();
	}

	private void performSearch()
	{
		if (string.IsNullOrEmpty(_searchText))
		{
			switch (Field.Type)
			{
				case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
					_searchedOptions = FilterData.FieldValues
						.Zip(Field.UniqueVerifiedValues.Select(v => new CrowdSourcedFieldDefinitionOptionViewModel()
						{
							Code = v,
							Text = v,
						}))
						.ToArray();
					break;
				default:
					_searchedOptions = FilterData.FieldValues
						.Zip(Field.Options)
						.ToArray();
					break;
			}
		}
		else
		{
			_searchedOptions = FilterData.FieldValues
				.Zip(Field.Options)
				.Where(o => o.Second.Text.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
				.ToArray();
		}
	}

	private async Task OperatorDidChange(SearchEntryOperator op)
	{
		FilterData.Operator = op;
		await DidChange();
	}

	private async Task OptionDidChange(SearchEntryOptionViewModel searchEntryOption, bool filtered)
	{
		searchEntryOption.Filtered = filtered;
		await DidChange();
	}

	private async Task DidChange()
	{
		switch (Field.Type)
		{
			case CrowdSourcedFieldType.IntegerNumber:
			case CrowdSourcedFieldType.FreeformTextarea:
				FilterData.FieldValues[0].Filtered = !string.IsNullOrEmpty(FilterData.FieldValues[0].Code);
				break;
			case CrowdSourcedFieldType.FreeformTextfield:
			default:
				break;
		}
		if (FilterDataChanged != null)
		{
			await FilterDataChanged.Value.InvokeAsync(FilterData);
		}
	}
}
