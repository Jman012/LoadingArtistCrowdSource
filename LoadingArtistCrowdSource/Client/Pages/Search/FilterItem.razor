<div class="dropdown">
	<button type="button" id="@($"{Field.Code}-btn-label")" class="btn btn-light btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
		@dropdownText
	</button>
	<ul class="dropdown-menu checkbox-menu allow-focus" aria-labelledby="@($"{Field.Code}-btn-label")">
		<li class="dropdown-item-text">
			<div class="input-group">
				<input type="text" value="@searchText" class="form-control form-control-sm" placeholder="Search..." @oninput="HandleSearchInput" />
				<button type="button" class="btn btn-sm bg-transparent" style="margin-left: -28px; z-index: 100;" @onclick="ClearSearchInput">
					<i class="fa fa-times"></i>
				</button>
			</div>
		</li>
		<li class="dropdown-divider"></li>

		<InputRadioGroup TValue="SearchEntryOperator" Value="@FilterData.Operator" ValueExpression="() => FilterData.Operator" ValueChanged="OperatorDidChange">
			@foreach (var op in System.Enum.GetValues(typeof(SearchEntryOperator)).Cast<SearchEntryOperator>())
			{
				<li>
					<label>
						<InputRadio Value="op"></InputRadio>
						@op.ToString()
					</label>
				</li>
			}
		</InputRadioGroup>
		<li class="dropdown-divider"></li>
		@foreach (var option in searchedOptions)
		{
			<li>
				<label>
					<InputCheckbox Value="option.Item1.Filtered" ValueExpression="() => option.Item1.Filtered" ValueChanged="(filtered) => OptionDidChange(option.Item1, filtered)"></InputCheckbox>
					@option.Item2.Text
				</label>
			</li>
		}
	</ul>
</div>

@code {

	[Parameter]
	public ComicFieldViewModel Field { get; set; } = new ComicFieldViewModel();

	[Parameter]
	public SearchEntryViewModel FilterData { get; set; } = new SearchEntryViewModel();
	[Parameter]
	public EventCallback<SearchEntryViewModel>? FilterDataChanged { get; set; }

	private List<CrowdSourcedFieldDefinitionOptionViewModel> fieldOptions { get; set; } = new List<CrowdSourcedFieldDefinitionOptionViewModel>();

	private string? searchText { get; set; }
	private (SearchEntryOptionViewModel, CrowdSourcedFieldDefinitionOptionViewModel)[] searchedOptions { get; set; } = new (SearchEntryOptionViewModel, CrowdSourcedFieldDefinitionOptionViewModel)[] { };

	private string dropdownText
	{
		get
		{
			if (FilterData.FieldValues.Zip(fieldOptions).Any(o => o.First.Filtered))
			{
				string values = string.Join(FilterData.Operator.Separator(), FilterData.FieldValues.Zip(fieldOptions).Where(o => o.First.Filtered).Select(o => o.Second.Text));
				return $"{Field.Name}: {values}";
			}
			else
			{
				return "Any " + Field.Name;
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		FilterData.FieldCode = Field.Code;

		switch (Field.Type)
		{
			case CrowdSourcedFieldType.Checkbox:
				fieldOptions = new List<CrowdSourcedFieldDefinitionOptionViewModel>()
				{
					new CrowdSourcedFieldDefinitionOptionViewModel() { Code = true.ToString(), Text = "Yes" },
					new CrowdSourcedFieldDefinitionOptionViewModel() { Code = true.ToString(), Text = "No" },
				};
				FilterData.FieldValues = new SearchEntryOptionViewModel[]
				{
					new SearchEntryOptionViewModel() { Code = true.ToString() },
					new SearchEntryOptionViewModel() { Code = false.ToString() },
				};
				break;
			default:
				fieldOptions = Field.Options;
				FilterData.FieldValues = fieldOptions.Select(o => new SearchEntryOptionViewModel() { Code = o.Code, Filtered = false }).ToArray();
				break;
		}
		await DidChange();
		performSearch();
		base.OnInitialized();
	}

	private void HandleSearchInput(ChangeEventArgs e)
	{
		searchText = e.Value as string;
		performSearch();
	}

	private void ClearSearchInput()
	{
		searchText = "";
		performSearch();
	}

	private void performSearch()
	{
		if (string.IsNullOrEmpty(searchText))
		{
			searchedOptions = FilterData.FieldValues
				.Zip(fieldOptions)
				.ToArray();
		}
		else
		{
			searchedOptions = FilterData.FieldValues
				.Zip(fieldOptions)
				.Where(o => o.Second.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase))
				.ToArray();
		}
	}

	private async Task OperatorDidChange(SearchEntryOperator op)
	{
		FilterData.Operator = op;
		await DidChange();
	}

	private async Task OptionDidChange(SearchEntryOptionViewModel searchEntryOption, bool filtered)
	{
		searchEntryOption.Filtered = filtered;
		await DidChange();
	}

	private async Task DidChange()
	{
		if (FilterDataChanged != null)
		{
			await FilterDataChanged.Value.InvokeAsync(FilterData);
		}
	}
}
