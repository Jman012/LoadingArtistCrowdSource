@page "/search"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api

@if (fields == null)
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border" role="status">
			<span class="sr-only">Loading...</span>
		</div>
	</div>
}
else
{
	<Container Fluid="false">
		<Row>
			<Column>
				<h1>Search</h1>

				<EditForm Model="searchVM">
					<Row>
						<Column>
							<FormNumber @bind-Value="searchVM.Id"></FormNumber>
						</Column>
						<Column>
							<FormTextfield @bind-Value="searchVM.Code"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<FormTextfield @bind-Value="searchVM.Title"></FormTextfield>
						</Column>
						<Column>
							<FormTextfield @bind-Value="searchVM.Description"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<div class="d-flex">
								<h3>Search Terms</h3>
								<div class="flex-fill"></div>
								@* <Button Type="ButtonType.Button" Outline="true" Color="Color.Secondary" title="Add new search term">
									<span class="oi oi-plus" aria-hidden="true"></span>
								</Button> *@
							</div>
						</Column>
					</Row>
					
					<div class="d-flex flex-wrap">
						@for (int i = 0; i < fields.Length; i++)
						{
							var index = i;
							<div class="m-2">
								<FilterItem2 Field="fields[i]"></FilterItem2>
							</div>
						}
					</div>

					<p>
						<Button Type="ButtonType.Submit" Color="Color.Primary">Search</Button>
					</p>
				</EditForm>

				<p>
					@foreach (var searchEntry in searchVM.SearchEntries)
					{
						@searchEntry.FieldCode
					}
				</p>

				<h3>Results</h3>
				<div>
					<div class="d-flex justify-content-center">
						<div class="spinner-border" role="status">
							<span class="sr-only">Loading...</span>
						</div>
					</div>
				</div>
			</Column>
		</Row>
	</Container>
}

@code {
	@* private class SearchEntry
	{
		public ComicFieldViewModel Field { get; set; } = new ComicFieldViewModel();
		public SearchEntryViewModel Entry { get; set; } = new SearchEntryViewModel();
	} *@

	private ComicFieldViewModel[]? fields { get; set; } = null;
	private SearchViewModel searchVM { get; set; } = new SearchViewModel();
	protected override async Task OnInitializedAsync()
	{
		try
		{
			fields = await Api.GetSearch();
			searchVM.SearchEntries = fields.Select(f => new SearchEntryViewModel()
			{
				FieldCode = f.Code,
			}).ToArray();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}

		await base.OnInitializedAsync();
	}
}
