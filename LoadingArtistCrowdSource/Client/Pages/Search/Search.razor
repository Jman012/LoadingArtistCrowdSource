@page "/search"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api

@if (fields == null)
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border" role="status">
			<span class="sr-only">Loading...</span>
		</div>
	</div>
}
else
{
	<Container Fluid="false">
		<Row>
			<Column>
				<h1>Search</h1>

				<EditForm Model="searchVM" OnValidSubmit="HandleValidSubmit">
					<Row>
						<Column>
							<FormNumber @bind-Value="searchVM.Id"></FormNumber>
						</Column>
						<Column>
							<FormTextfield @bind-Value="searchVM.Code"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<FormTextfield @bind-Value="searchVM.Title"></FormTextfield>
						</Column>
						<Column>
							<FormTextfield @bind-Value="searchVM.Description"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<div class="d-flex">
								<h4>Search Terms</h4>
								<div class="flex-fill"></div>
							</div>
						</Column>
					</Row>

					<div class="d-flex flex-wrap">
						@for (int i = 0; i < fields.Length; i++)
						{
							var index = i;
							if (fields[index].Type == CrowdSourcedFieldType.Section)
							{
								<h5 style="width: 100%;">@fields[index].Name</h5>
							}
							else
							{
								<div class="m-2">
									<FilterItem Field="fields[index]" @bind-FilterData="searchVM.SearchEntries[index]"></FilterItem>
								</div>
							}
						}
					</div>

					<p>
						<Button Type="ButtonType.Submit" Color="Color.Primary">Search</Button>
					</p>
				</EditForm>

				@*<pre>
			 @System.Text.Json.JsonSerializer.Serialize(searchVM, options: new System.Text.Json.JsonSerializerOptions(System.Text.Json.JsonSerializerDefaults.General)
		{
			WriteIndented = true,
		})
		 </pre>*@

				@if (comics == null)
				{
					<div>
						<div class="d-flex justify-content-center">
							<div class="spinner-border" role="status">
								<span class="sr-only">Loading...</span>
							</div>
						</div>
					</div>
				}
				else
				{
					<LoadingArtistCrowdSource.Client.Pages.Comics.ComicListView Comics="comics">
						<HeaderContent>
							<h3>Results</h3>
						</HeaderContent>
					</LoadingArtistCrowdSource.Client.Pages.Comics.ComicListView>
				}

			</Column>
		</Row>
	</Container>
}

@code {

	private ComicFieldViewModel[]? fields { get; set; } = null;
	private SearchViewModel searchVM { get; set; } = new SearchViewModel();
	private ComicViewModel[]? comics { get; set; } = new ComicViewModel[] { };

	protected override async Task OnInitializedAsync()
	{
		try
		{
			fields = await Api.GetSearchFields();
			searchVM.SearchEntries = fields.Select(f => new SearchEntryViewModel()
			{
				FieldCode = f.Code,
			}).ToArray();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}

		await base.OnInitializedAsync();
	}

	private async Task HandleValidSubmit()
	{
		comics = null;

		try
		{
			comics = await Api.PostSearch(searchVM);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
