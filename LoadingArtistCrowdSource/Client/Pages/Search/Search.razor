@page "/search"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api
@inject NavigationManager NavigationManager

@if (_fields == null)
{
	<Spinner></Spinner>
}
else
{
	<Container Fluid="false">
		<Row>
			<Column>
				<h1>Search</h1>

				<EditForm Model="_searchVM" OnValidSubmit="HandleValidSubmit">
					<Row>
						<Column>
							<FormNumber @bind-Value="_searchVM.Id"></FormNumber>
						</Column>
						<Column>
							<FormTextfield @bind-Value="_searchVM.Code"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<FormTextfield @bind-Value="_searchVM.Title"></FormTextfield>
						</Column>
						<Column>
							<FormTextfield @bind-Value="_searchVM.Tooltip"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<FormTextfield @bind-Value="_searchVM.Description"></FormTextfield>
						</Column>
						<Column>
							<FormTextfield @bind-Value="_searchVM.Transcript"></FormTextfield>
						</Column>
					</Row>
					<Row>
						<Column>
							<div class="d-flex">
								<h4>Search Terms</h4>
								<div class="flex-fill"></div>
							</div>
						</Column>
					</Row>

					<div class="d-flex flex-wrap border rounded mb-3">
						@for (int i = 0; i < _fields.Length; i++)
						{
							var index = i;
							if (_fields[index].Type == CrowdSourcedFieldType.Section)
							{
								<h5 style="width: 100%;">@_fields[index].Name</h5>
							}
							else
							{
								<div class="m-2">
									<FilterItem Field="_fields[index]" @bind-FilterData="_searchVM.SearchEntries[index]"></FilterItem>
								</div>
							}
						}
					</div>

					<p>
						<Button Type="ButtonType.Submit" Color="Color.Primary">Search</Button>
					</p>
				</EditForm>

				@if (_comics == null)
				{
					<Spinner></Spinner>
				}
				else
				{
					<LoadingArtistCrowdSource.Client.Pages.Comics.ComicListView Comics="_comics">
						<HeaderContent>
							<h3>Results (@_comics.Length)</h3>
						</HeaderContent>
					</LoadingArtistCrowdSource.Client.Pages.Comics.ComicListView>
				}

			</Column>
		</Row>
	</Container>
}

@code {

	private ComicFieldViewModel[]? _fields = null;
	private SearchViewModel _searchVM = new SearchViewModel();
	private ComicListItemViewModel[]? _comics = new ComicListItemViewModel[] { };

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_fields = await Api.GetSearchFields();
			Load();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}

		NavigationManager.LocationChanged += (s, e) => Load();

		await base.OnInitializedAsync();
	}

	private void Load()
	{
		_searchVM = new SearchViewModel();
		_searchVM.SearchEntries = _fields!.Select(f => 
		{
			var searchEntry = new SearchEntryViewModel()
			{
				FieldCode = f.Code,
				Operator = default,
			};

			switch (f.Type)
			{
				case CrowdSourcedFieldType.IntegerNumber:
				case CrowdSourcedFieldType.FreeformTextfield:
				case CrowdSourcedFieldType.FreeformTextarea:
					searchEntry.FieldValues = new SearchEntryOptionViewModel[]
					{
						new SearchEntryOptionViewModel()
						{
							Code = "",
							Filtered = true,
						},
					};
					break;
				default:
					searchEntry.FieldValues = f.Options.Select(o => new SearchEntryOptionViewModel() 
					{ 
						Code = o.Code, 
						Filtered = false 
					}).ToArray();
					break;
			}

			return searchEntry;
		}).ToArray();

		_searchVM.DecodeFromQueryString(new Uri(NavigationManager.Uri).Query);
		StateHasChanged();
	}

	private async Task HandleValidSubmit()
	{
		_comics = null;

		string searchQuery = _searchVM.EncodeToQueryString();
		if (string.IsNullOrEmpty(searchQuery))
		{
			NavigationManager.NavigateTo("/search");
		}
		else
		{
			NavigationManager.NavigateTo("/search?" + searchQuery);
		}

		var newSearchVM = new SearchViewModel()
		{
			Id = _searchVM.Id,
			Code = _searchVM.Code,
			Title = _searchVM.Title,
			Tooltip = _searchVM.Tooltip,
			Description = _searchVM.Description,
			Transcript = _searchVM.Transcript,
			SearchEntries = _searchVM.SearchEntries.Where(se => se.FieldValues.Any(fv => fv.Filtered)).ToArray(),
		};

		try
		{
			_comics = await Api.PostSearch(newSearchVM);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
	}
}
