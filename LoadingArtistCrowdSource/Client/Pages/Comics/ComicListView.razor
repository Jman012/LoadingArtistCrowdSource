@inject IJSRuntime JsRuntime;

<div class="d-flex">
	@HeaderContent
	<div class="flex-fill"></div>
	<div>
		@*This wrapper is needed to not have the button group match the height of the h1*@
		<Buttons>
			<Button Type="ButtonType.Button"
					Color="Color.Light"
					Active="view == ComicListViewType.GroupedByYear"
					Clicked="GroupedByYear">
				<Icon Name="@("fa-th-large")" />
			</Button>
			<Button Type="ButtonType.Button"
					Color="Color.Light"
					Active="view == ComicListViewType.Thumbnail"
					Clicked="Thumbnail">
				<Icon Name="@("fa-th")" />
			</Button>
			<Button Type="ButtonType.Button"
					Color="Color.Light"
					Active="view == ComicListViewType.Table"
					Clicked="Table">
				<Icon Name="@("fa-th-list")" />
			</Button>
		</Buttons>
	</div>
</div>

@if (view == ComicListViewType.GroupedByYear)
{
	var i = 0;
	<div class="d-flex">
		<div class="flex-fill"></div>
		<div>
			<Button Type="ButtonType.Button" Class="btn-link" Clicked="ExpandAll">Expand</Button>/<Button Type="ButtonType.Button" Class="btn-link" Clicked="CollapseAll">Collapse</Button>
		</div>
	</div>
	@foreach (var year in ComicsGroupedByYear.OrderBy(y => y.Year))
	{
		var index = i++;
		<Collapsible @ref="GroupedByYearCollapsibles[index]" IsCollapsed="true" IdPrefix="@year.Year.ToString()">
			<HeaderContent Context="isCollapsed">
				<h3 class="header-collapsible">
					<span class="collapse-icon oi @(isCollapsed ? "oi-chevron-right" : "oi-chevron-bottom")" aria-hidden="true"></span>
					@year.Year <small class="text-muted">(@year.Comics.Count())</small>
				</h3>
			</HeaderContent>
			<ChildContent Context="isCollapsed">
				<div class="d-flex flex-wrap">
					@foreach (var comic in year.Comics.OrderBy(c => c.Id))
					{
						<div class="comic-thumbnail-link">
							<NavLink class="btn btn-link d-flex flex-column" href="@($"comic/{Uri.EscapeDataString(comic.Code)}")">
								<img src="@comic.ImageThumbnailUrlSrc" width="128" height="128" title="@comic.Title" alt="@comic.Title" />
								<center class="comic-title">
									@comic.Title
								</center>
							</NavLink>
						</div>
					}
				</div>
			</ChildContent>
		</Collapsible>
	}
}
else if (view == ComicListViewType.Thumbnail)
{
	<div class="d-flex flex-wrap">
		@foreach (var comic in Comics)
		{
			<div class="comic-thumbnail-link">
				<NavLink class="btn btn-link d-flex flex-column" href="@($"comic/{Uri.EscapeDataString(comic.Code)}")">
					<img src="@comic.ImageThumbnailUrlSrc" width="128" height="128" title="@comic.Title" alt="@comic.Title" />
					<center class="comic-title">
						@comic.Title
					</center>
				</NavLink>
			</div>
		}
	</div>
}
else
{
	<BlazorTable.Table TableItem="ComicListItemViewModel" Items="Comics" PageSize="15">
		<BlazorTable.Column TableItem="ComicListItemViewModel" Title="Thumbnail" Field="@(c => c.ImageThumbnailUrlSrc)" Sortable="true" Filterable="true">
			<Template>
				<img src="@context.ImageThumbnailUrlSrc" width="64" height="64" title="@context.Title" alt="@context.Title" />
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicListItemViewModel" Title="Id" Field="@(c => c.Id)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicListItemViewModel" Title="Published" Field="@(c => c.ComicPublishedDate)" Sortable="true" Filterable="true">
			<Template>
				@context.ComicPublishedDate.ToString("yyyy-MM-dd")
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicListItemViewModel" Title="Title" Field="@(c => c.Title)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicListItemViewModel" Field="@(c => c.Code)">
			<Template>
				<NavLink class="nav-link" href="@($"comic/{Uri.EscapeDataString(context.Code)}")">
					<span class="oi oi-plus" aria-hidden="true"></span> View
				</NavLink>
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>
}

@code {
	class GroupedYear
	{
		public int Year;
		public IEnumerable<ComicListItemViewModel> Comics = new ComicListItemViewModel[] { };
	}

	const string Cookie = "ComicListViewType";
	[Parameter]
	public IEnumerable<ComicListItemViewModel> Comics { get; set; } = new ComicListItemViewModel[] { };
	[Parameter]
	public RenderFragment? HeaderContent { get; set; }

	private ComicListViewType view { get; set; } = ComicListViewType.GroupedByYear;
	private IEnumerable<GroupedYear> ComicsGroupedByYear { get; set; } = new GroupedYear[] { };
	private Collapsible[] GroupedByYearCollapsibles { get; set; } = new Collapsible[] { };

	protected override async Task OnInitializedAsync()
	{
		string cookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie", Cookie);
		if (!string.IsNullOrEmpty(cookieValue))
		{
			if (System.Enum.TryParse(cookieValue, out ComicListViewType cookieView))
			{
				this.view = cookieView;
			}
		}

		ComicsGroupedByYear = Comics.GroupBy(c => c.ComicPublishedDate.Year, c => c, (year, c) => new GroupedYear { Year = year, Comics = c });
		GroupedByYearCollapsibles = ComicsGroupedByYear.Select(y => new Collapsible()).ToArray();

		await base.OnInitializedAsync();
	}

	private async Task GroupedByYear()
	{
		view = ComicListViewType.GroupedByYear;
		await JsRuntime.InvokeVoidAsync("WriteCookie", Cookie, view.ToString());
	}

	private async Task Thumbnail()
	{
		view = ComicListViewType.Thumbnail;
		await JsRuntime.InvokeVoidAsync("WriteCookie", Cookie, view.ToString());
	}

	private async Task Table()
	{
		view = ComicListViewType.Table;
		await JsRuntime.InvokeVoidAsync("WriteCookie", Cookie, view.ToString());
	}

	private void ExpandAll()
	{
		foreach (var c in GroupedByYearCollapsibles)
		{
			c.Expand();
		}
	}

	private void CollapseAll()
	{
		foreach (var c in GroupedByYearCollapsibles)
		{
			c.Collapse();
		}
	}
}
