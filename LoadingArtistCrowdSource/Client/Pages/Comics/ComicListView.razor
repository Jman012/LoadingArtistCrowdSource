@inject IJSRuntime JsRuntime;

<div class="d-flex">
	@HeaderContent
	<div class="flex-fill"></div>
	<div>
		@*This wrapper is needed to not have the button group match the height of the h1*@
		<Buttons>
			<Button Type="ButtonType.Button"
					Color="Color.Light"
					Active="view == ComicListViewType.Thumbnail"
					Clicked="Thumbnail">
				<Icon Name="@("fa-th-large")" />
			</Button>
			<Button Type="ButtonType.Button"
					Color="Color.Light"
					Active="view == ComicListViewType.Table"
					Clicked="Table">
				<Icon Name="@("fa-th-list")" />
			</Button>
		</Buttons>
	</div>
</div>

@if (view == ComicListViewType.Thumbnail)
{
	<div class="d-flex">
		@foreach (var comic in Comics)
		{
			<div>
				<NavLink href="@($"comic/{comic.Code}")">
					<img src="@comic.ImageThumbnailUrlSrc" width="128" height="128" title="@comic.Tooltip" alt="@comic.Tooltip" />
					<br />
					<center class="w-100">
						@comic.Title
					</center>
				</NavLink>
			</div>
		}
	</div>
}
else
{
	<BlazorTable.Table TableItem="ComicViewModel" Items="Comics" PageSize="15">
		<BlazorTable.Column TableItem="ComicViewModel" Title="Thumbnail" Field="@(c => c.ImageUrlSrc)" Sortable="true" Filterable="true">
			<Template>
				<img src="@context.ImageThumbnailUrlSrc" width="128" height="128" title="@context.Tooltip" alt="@context.Tooltip" />
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicViewModel" Title="Id" Field="@(c => c.Id)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicViewModel" Title="Published" Field="@(c => c.ComicPublishedDate)" Sortable="true" Filterable="true">
			<Template>
				@context.ComicPublishedDate.ToString("yyyy-MM-dd")
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicViewModel" Title="Title" Field="@(c => c.Title)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="ComicViewModel" Field="@(c => c.Code)">
			<Template>
				<NavLink class="nav-link" href="@($"comic/{context.Code}")">
					<span class="oi oi-plus" aria-hidden="true"></span> View
				</NavLink>
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>
}

@code {
	const string Cookie = "ComicListViewType";
	[Parameter]
	public IEnumerable<ComicViewModel> Comics { get; set; } = new ComicViewModel[] { };
	[Parameter]
	public RenderFragment? HeaderContent { get; set; }

	private ComicListViewType view { get; set; } = ComicListViewType.Thumbnail;

	protected override async Task OnInitializedAsync()
	{
		string cookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie", Cookie);
		if (!string.IsNullOrEmpty(cookieValue))
		{
			if (System.Enum.TryParse(cookieValue, out ComicListViewType cookieView))
			{
				this.view = cookieView;
			}
		}
		await base.OnInitializedAsync();
	}

	private async Task Thumbnail()
	{
		view = ComicListViewType.Thumbnail;
		await JsRuntime.InvokeVoidAsync("WriteCookie", Cookie, view.ToString());
	}

	private async Task Table()
	{
		view = ComicListViewType.Table;
		await JsRuntime.InvokeVoidAsync("WriteCookie", Cookie, view.ToString());
	}
}
