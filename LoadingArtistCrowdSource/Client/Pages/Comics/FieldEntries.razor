@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="input-group mb-2">
	<input type="text" class="form-control" placeholder="Search Fields" aria-label="Search" value="@filter" @oninput="HandleSearchInput">
	<div class="input-group-append">
		@if (isFiltering)
		{
			<button class="btn btn-outline-secondary" type="button" @onclick="HandleClearFilter">
				<span class="oi oi-x" aria-hidden="true"></span>
			</button>
		}
		else
		{
			<span class="input-group-text">
				<span class="oi oi-magnifying-glass" aria-hidden="true"></span>
			</span>
		}
	</div>
</div>

<div class="form-inline mb-2">
	<AuthorizeView>
		<Authorized>
			<div class="form-check mr-sm-2">
				<input type="checkbox" class="form-check-input" id="filterCheckAnswered" @bind="filterCheckAnswered">
				<label class="form-check-label" for="filterCheckAnswered">Answered</label>
			</div>
		</Authorized>
	</AuthorizeView>
	<div class="form-check mr-sm-2">
		<input type="checkbox" class="form-check-input" id="filterCheckNoData" @bind-value="filterCheckNoData">
		<label class="form-check-label" for="filterCheckNoData">No Data</label>
	</div>
	<div class="form-check mr-sm-2">
		<input type="checkbox" class="form-check-input" id="filterCheckCollectingData" @bind-value="filterCheckCollectingData">
		<label class="form-check-label" for="filterCheckCollectingData">Collecting Data</label>
	</div>
	<div class="form-check mr-sm-2">
		<input type="checkbox" class="form-check-input" id="filterCheckAcceptedAnswer" @bind-value="filterCheckAcceptedAnswer">
		<label class="form-check-label" for="filterCheckAcceptedAnswer">Accepted Answer</label>
	</div>
</div>

<div class="d-flex mb-2">
	<div class="flex-fill"></div>
	<div>
		<Button Type="ButtonType.Button" Class="btn-link" Clicked="ExpandAll">Expand</Button>/<Button Type="ButtonType.Button" Class="btn-link" Clicked="CollapseAll">Collapse</Button>
	</div>
</div>

<ListGroup>
	@foreach (var field in filteredFields)
	{
		var theField = field;
		<Collapsible IsCollapsed="collapse" IdPrefix="@("VerifiedEntry_" + field.Code)" ButtonClass="list-group-item list-group-item-action" ChildClass="list-group-item">
			<HeaderContent Context="isCollapsed">
				<div class="d-flex w-100 justify-content-between">
					<div class="d-flex">
						<span class="collapse-icon oi @(isCollapsed ? "oi-chevron-right" : "oi-chevron-bottom")" aria-hidden="true"></span>
						<h5 class="mb-1">@field.Name</h5>
					</div>
					<div class="h6 mb-1">
						@if (field.VerifiedEntry != null)
						{
							foreach (var ve in field.VerifiedEntry.Values)
							{
								<span class="badge badge-secondary">@ve</span><text>&nbsp;</text>
							}
						}
						else if (field.UserEntries.Count > 0)
						{
							<span class="badge badge-info">Collecting</span>
						}
						else
						{
							<span class="badge badge-warning">No Data</span>
						}
					</div>
				</div>
				<small class="text-muted">@field.ShortDescription</small>
			</HeaderContent>
			<ChildContent Context="isCollapsed">
				<div>
					<Table>
						<TableBody>
							<TableRow>
								<TableRowCell colspan="2">
									@if (field.VerifiedEntry == null)
									{
										<Button Size="Size.Small" Outline="true" Color="Color.Info" Style="float: right;" Clicked="() => HandleAnswerField(theField)">
											<span class="oi oi-pencil" aria-hidden="true"></span>&nbsp;
											@if (userName != null && field.UserEntries.Any(ue => ue.CreatedByUser.UserName == userName))
											{
												<text>Edit</text>
											}
											else
											{
												<text>Answer</text>
											}
										</Button>
									}
									<p>@field.LongDescription</p>
								</TableRowCell>
							</TableRow>
							<TableRow>
								<TableHeaderCell>Date Verified</TableHeaderCell>
								<TableRowCell>@field.VerifiedEntry?.VerificationDate.ToLocalTime().ToString("yyyy-MM-dd hh:mm:ss tt")</TableRowCell>
							</TableRow>
							<TableRow>
								<TableHeaderCell>Submitters</TableHeaderCell>
								<TableRowCell>@string.Join(", ", field.UserEntries.Select(ue => ue.CreatedByUser.UserName))</TableRowCell>
							</TableRow>
						</TableBody>
					</Table>
				</div>
			</ChildContent>
		</Collapsible>
	}
</ListGroup>

<UserEntryEditFormModal @ref="userEntryModal" OnSubmit="HandleUserEntrySubmitted"></UserEntryEditFormModal>

@code {
	[Parameter]
	public string ComicCode { get; set; } = "";
	[Parameter]
	public string ComicImgSrc { get; set; } = "";
	[Parameter]
	public IEnumerable<ComicFieldViewModel> Fields { get; set; } = new ComicFieldViewModel[] { };
	[Parameter]
	public EventCallback OnComicNeedsRefresh { get; set; } = new EventCallback();

	private string? userName { get; set; }
	private UserEntryEditFormModal userEntryModal { get; set; } = new UserEntryEditFormModal();
	private bool collapse { get; set; } = true;

	private IEnumerable<ComicFieldViewModel> filteredFields { get; set; } = new ComicFieldViewModel[] { };
	private bool isFiltering { get; set; } = false;
	private string? filter { get; set; }
	private bool _filterCheckAnswered = false;
	private bool filterCheckAnswered { get { return _filterCheckAnswered; } set { _filterCheckAnswered = value; performFilter(); } }
	private bool _filterCheckNoData = false;
	private bool filterCheckNoData { get { return _filterCheckNoData; } set { _filterCheckNoData = value; performFilter(); } }
	private bool _filterCheckCollectingData = false;
	private bool filterCheckCollectingData { get { return _filterCheckCollectingData; } set { _filterCheckCollectingData = value; performFilter(); } }
	private bool _filterCheckAcceptedAnswer = false;
	private bool filterCheckAcceptedAnswer { get { return _filterCheckAcceptedAnswer; } set { _filterCheckAcceptedAnswer = value; performFilter(); } }

	protected override async Task OnInitializedAsync()
	{
		var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
		if (user.Identity!.IsAuthenticated)
		{
			userName = user.Identity!.Name;
		}
		HandleClearFilter();
		await base.OnInitializedAsync();
	}

	private void HandleAnswerField(ComicFieldViewModel field)
	{
		userEntryModal.Open(new UserEntryEditFormModal.State()
		{
			ComicField = field,
			ComicCode = ComicCode,
			ComicImgSrc = ComicImgSrc,
		});
	}

	private async Task HandleUserEntrySubmitted(UserEntryEditFormModal.State state)
	{
		await OnComicNeedsRefresh.InvokeAsync();
	}

	private void HandleSearchInput(ChangeEventArgs e)
	{
		filter = e.Value as string;
		performFilter();
	}

	private void performFilter()
	{
		filteredFields = Fields;

		if (!string.IsNullOrEmpty(filter))
		{
			filteredFields = filteredFields.Where(f => f.Name.Contains(filter, StringComparison.OrdinalIgnoreCase) || f.ShortDescription.Contains(filter, StringComparison.OrdinalIgnoreCase) || f.LongDescription.Contains(filter, StringComparison.OrdinalIgnoreCase));
			isFiltering = true;
		}
		else
		{
			isFiltering = false;
		}
		if (_filterCheckAnswered || _filterCheckNoData || _filterCheckCollectingData || _filterCheckAcceptedAnswer)
		{
			filteredFields = filteredFields.Where(f =>
				(_filterCheckAnswered && f.UserEntries.Any(ue => ue.CreatedByUser.UserName == userName)) ||
				(_filterCheckNoData && !f.UserEntries.Any()) ||
				(_filterCheckCollectingData && f.UserEntries.Any() && f.VerifiedEntry == null) ||
				(_filterCheckAcceptedAnswer && f.VerifiedEntry != null));
		}
		filteredFields = filteredFields.ToArray();
	}

	private void HandleClearFilter()
	{
		filter = "";
		filteredFields = Fields.ToArray();
		isFiltering = false;
	}


	private void ExpandAll()
	{
		collapse = false;
	}

	private void CollapseAll()
	{
		collapse = true;
	}
}
