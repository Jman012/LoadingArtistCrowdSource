@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="input-group mb-2">
	<input type="text" class="form-control" placeholder="Search Fields" aria-label="Search" value="@filter" @oninput="HandleSearchInput">
	<div class="input-group-append">
		@if (isFiltering)
		{
			<button class="btn btn-outline-secondary" type="button" @onclick="HandleClearFilter">
				<span class="oi oi-x" aria-hidden="true"></span>
			</button>
		}
		else
		{
			<span class="input-group-text">
				<span class="oi oi-magnifying-glass" aria-hidden="true"></span>
			</span>
		}
	</div>
</div>

<div class="form-inline mb-2">
	<AuthorizeView>
		<Authorized>
			<div class="form-check mr-sm-2">
				<input type="checkbox" class="form-check-input" id="filterCheckAnswered" @bind="filterCheckAnswered">
				<label class="form-check-label" for="filterCheckAnswered">Answered</label>
			</div>
		</Authorized>
	</AuthorizeView>
	<div class="form-check mr-sm-2">
		<input type="checkbox" class="form-check-input" id="filterCheckNoData" @bind-value="filterCheckNoData">
		<label class="form-check-label" for="filterCheckNoData">No Data</label>
	</div>
	<div class="form-check mr-sm-2">
		<input type="checkbox" class="form-check-input" id="filterCheckCollectingData" @bind-value="filterCheckCollectingData">
		<label class="form-check-label" for="filterCheckCollectingData">Collecting Data</label>
	</div>
	<div class="form-check mr-sm-2">
		<input type="checkbox" class="form-check-input" id="filterCheckAcceptedAnswer" @bind-value="filterCheckAcceptedAnswer">
		<label class="form-check-label" for="filterCheckAcceptedAnswer">Accepted Answer</label>
	</div>
</div>

<div class="d-flex mb-2 align-items-baseline">
	<div class="progress" style="width: 100px; height: 22px;">
		<div class="progress-bar" role="progressbar" style="min-width: @(Math.Floor(ComicProgress * 100.0))%" aria-valuenow="@(Math.Floor(ComicProgress * 100.0))" aria-valuemin="0" aria-valuemax="100">
			@(Math.Floor(ComicProgress * 100.0))%
		</div>
	</div>
	<div class="flex-fill"></div>
	<div>
		<Button Type="ButtonType.Button" Class="btn-link" Clicked="ExpandAll">Expand</Button>/<Button Type="ButtonType.Button" Class="btn-link" Clicked="CollapseAll">Collapse</Button>
	</div>
</div>

<ListGroup>
	@{ var i = 0; }
	@foreach (var field in filteredFields)
	{
		var index = i++;
		var theField = field;
		if (field.Type == CrowdSourcedFieldType.Section)
		{
			<div class="list-group-item">
				<h6 class="mb-0">@field.Name</h6>
			</div>
		}
		else
		{
			<Collapsible @ref="collapsibles[field.Code]" IsCollapsed="true" IdPrefix="@("VerifiedEntry_" + field.Code)" ButtonClass="list-group-item list-group-item-action" ChildClass="list-group-item">
				<HeaderContent Context="isCollapsed">
					<div class="d-flex w-100 justify-content-between">
						<div class="d-flex align-items-center">
							<span class="collapse-icon oi @(isCollapsed ? "oi-chevron-right" : "oi-chevron-bottom")" aria-hidden="true"></span>
							<span>@field.Name</span>
						</div>
						<div class="h6 mb-1">
							@if (field.VerifiedEntry != null)
							{
								foreach (var ve in field.VerifiedEntry.Values)
								{
									<span class="badge badge-secondary">@ve</span><text>&nbsp;</text>
								}
							}
							else if (field.UserEntries.Count > 0)
							{
								<span class="badge badge-info">Collecting</span>
							}
							else
							{
								<span class="badge badge-warning">No Data</span>
							}
						</div>
					</div>
					<small class="text-muted">@field.ShortDescription</small>
				</HeaderContent>
				<ChildContent Context="isCollapsed">
					<div>
						<Table Narrow="true">
							<TableBody>
								<TableRow>
									<TableRowCell colspan="2" style="border-top: none;">
										<Button Size="Size.ExtraSmall" Outline="true" Color="Color.Info" Style="float: right;" Clicked="() => HandleAnswerField(theField)">
											<span class="oi oi-pencil" aria-hidden="true"></span>&nbsp;
											@if (userName != null && field.UserEntries.Any(ue => ue.CreatedByUser.UserName == userName))
											{
												<text>Edit</text>
											}
											else
											{
												<text>Answer</text>
											}
										</Button>
										<p>@field.LongDescription</p>
									</TableRowCell>
								</TableRow>
								<TableRow>
									<TableRowCell>Date Verified</TableRowCell>
									<TableRowCell>@field.VerifiedEntry?.VerificationDate.ToLocalTime().ToString("yyyy-MM-dd hh:mm:ss tt")</TableRowCell>
								</TableRow>
								<TableRow>
									<TableRowCell>Submitters</TableRowCell>
									<TableRowCell>@string.Join(", ", field.UserEntries.Select(ue => ue.CreatedByUser.UserName))</TableRowCell>
								</TableRow>
							</TableBody>
						</Table>
					</div>
				</ChildContent>
			</Collapsible>
		}
	}
</ListGroup>

<UserEntryEditFormModal @ref="userEntryModal" OnSubmit="HandleUserEntrySubmitted" Fields="filteredFieldsWithoutSections"></UserEntryEditFormModal>

@code {
	[Parameter]
	public string ComicCode { get; set; } = "";
	[Parameter]
	public string ComicImgSrc { get; set; } = "";
	[Parameter]
	public double ComicProgress { get; set; }
	[Parameter]
	public IEnumerable<ComicFieldViewModel> Fields { get; set; } = new ComicFieldViewModel[] { };
	[Parameter]
	public EventCallback OnComicNeedsRefresh { get; set; } = new EventCallback();

	public Dictionary<string, Collapsible> collapsibles { get; set; } = new Dictionary<string, Collapsible>();
	private string? userName { get; set; }
	private UserEntryEditFormModal userEntryModal { get; set; } = new UserEntryEditFormModal();

	private IReadOnlyList<ComicFieldViewModel> filteredFields { get; set; } = new List<ComicFieldViewModel>();
	private IReadOnlyList<ComicFieldViewModel> filteredFieldsWithoutSections { get; set; } = new List<ComicFieldViewModel>();
	private bool isFiltering { get; set; } = false;
	private string? filter { get; set; }
	private bool _filterCheckAnswered = false;
	private bool filterCheckAnswered { get { return _filterCheckAnswered; } set { _filterCheckAnswered = value; performFilter(); } }
	private bool _filterCheckNoData = false;
	private bool filterCheckNoData { get { return _filterCheckNoData; } set { _filterCheckNoData = value; performFilter(); } }
	private bool _filterCheckCollectingData = false;
	private bool filterCheckCollectingData { get { return _filterCheckCollectingData; } set { _filterCheckCollectingData = value; performFilter(); } }
	private bool _filterCheckAcceptedAnswer = false;
	private bool filterCheckAcceptedAnswer { get { return _filterCheckAcceptedAnswer; } set { _filterCheckAcceptedAnswer = value; performFilter(); } }

	protected override async Task OnInitializedAsync()
	{
		var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
		if (user.Identity!.IsAuthenticated)
		{
			userName = user.Identity!.Name;
		}
		HandleClearFilter();
		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		performFilter();

		await base.OnParametersSetAsync();
	}

	private void HandleAnswerField(ComicFieldViewModel field)
	{
		userEntryModal.Open(new UserEntryEditFormModal.State()
		{
			ComicField = field,
			ComicCode = ComicCode,
			ComicImgSrc = ComicImgSrc,
		});
	}

	private async Task HandleUserEntrySubmitted(UserEntryEditFormModal.Completion completion)
	{
		int index = filteredFieldsWithoutSections.Select((item, index) => new { item, index }).First(x => x.item.Code == completion.Field.Code).index;
		ComicFieldViewModel? previous = index - 1 < 0 ? (ComicFieldViewModel?)null : filteredFieldsWithoutSections[index - 1];
		ComicFieldViewModel? next = index + 1 >= filteredFieldsWithoutSections.Count ? (ComicFieldViewModel?)null : filteredFieldsWithoutSections[index + 1];

		switch (completion.Type)
		{
			case UserEntryEditFormModal.CompletionType.Back:
				userEntryModal.Open(new UserEntryEditFormModal.State()
				{
					ComicField = previous ?? new ComicFieldViewModel(),
					ComicCode = ComicCode,
					ComicImgSrc = ComicImgSrc,
				});
				break;
			case UserEntryEditFormModal.CompletionType.SkipNext:
				userEntryModal.Open(new UserEntryEditFormModal.State()
				{
					ComicField = next ?? new ComicFieldViewModel(),
					ComicCode = ComicCode,
					ComicImgSrc = ComicImgSrc,
				});
				break;
			case UserEntryEditFormModal.CompletionType.SubmitAndNext:
				if (next == null)
				{
					userEntryModal.Close();
				}
				else
				{
					userEntryModal.Open(new UserEntryEditFormModal.State()
					{
						ComicField = next ?? new ComicFieldViewModel(),
						ComicCode = ComicCode,
						ComicImgSrc = ComicImgSrc,
					});
				}
				await OnComicNeedsRefresh.InvokeAsync();
				break;
			case UserEntryEditFormModal.CompletionType.Cancel:
			default:
				userEntryModal.Close();
				break;
		}

	}

	private void HandleSearchInput(ChangeEventArgs e)
	{
		filter = e.Value as string;
		performFilter();
	}

	private void performFilter()
	{
		IEnumerable<ComicFieldViewModel> filteredFields = Fields;

		if (!string.IsNullOrEmpty(filter))
		{
			filteredFields = filteredFields.Where(f => f.Type == CrowdSourcedFieldType.Section || f.Name.Contains(filter, StringComparison.OrdinalIgnoreCase) || f.ShortDescription.Contains(filter, StringComparison.OrdinalIgnoreCase) || f.LongDescription.Contains(filter, StringComparison.OrdinalIgnoreCase));
			isFiltering = true;
		}
		else
		{
			isFiltering = false;
		}
		if (_filterCheckAnswered || _filterCheckNoData || _filterCheckCollectingData || _filterCheckAcceptedAnswer)
		{
			filteredFields = filteredFields.Where(f =>
				f.Type == CrowdSourcedFieldType.Section ||
				(_filterCheckAnswered && f.UserEntries.Any(ue => ue.CreatedByUser.UserName == userName)) ||
				(_filterCheckNoData && !f.UserEntries.Any()) ||
				(_filterCheckCollectingData && f.UserEntries.Any() && f.VerifiedEntry == null) ||
				(_filterCheckAcceptedAnswer && f.VerifiedEntry != null));
		}
		this.filteredFields = filteredFields.ToList();
		this.filteredFieldsWithoutSections = this.filteredFields.Where(f => f.Type != CrowdSourcedFieldType.Section).ToList();
	}

	private void HandleClearFilter()
	{
		filter = "";
		filteredFields = Fields.ToList();
		filteredFieldsWithoutSections = filteredFields.Where(f => f.Type != CrowdSourcedFieldType.Section).ToList();
		isFiltering = false;
	}


	private void ExpandAll()
	{
		foreach (var c in collapsibles.Values)
		{
			c.Expand();
		}
	}

	private void CollapseAll()
	{
		foreach (var c in collapsibles.Values)
		{
			c.Collapse();
		}
	}
}
