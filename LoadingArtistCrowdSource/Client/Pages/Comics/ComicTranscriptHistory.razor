@page "/comic/{ComicCode}/transcript"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (_isLoading)
{
	<Spinner></Spinner>
}
else
{
	<Container Fluid="false">
		<Row>
			<Column>
				<div>
					<NavLink href="@($"/comic/{Uri.EscapeDataString(ComicCode)}")">
						<HelperIcon Name="chevron-left" /> Back to Comic
					</NavLink>
				</div>
				<h2>Transcript</h2>

				@{
					var i = 0;
				}
				@foreach (var transcriptHistory in _transcriptHistories.Reverse())
				{
					var index = i += 1;
					<div class="mb-3">
						<div class="d-flex align-items-baseline flex-wrap">
							<h6 class="text-nowrap">
								@transcriptHistory.CreatedByUser.UserName
							</h6>
							<small class="text-muted ml-2 text-nowrap">@transcriptHistory.CreatedDate</small>

							<AuthorizeView>
								<Authorized>
									@if (index > 0)
									{
										<div class="flex-fill"></div>
										<a role="button" href="" @onclick="() => RollbackToHistory(transcriptHistory.Id)" @onclick:preventDefault="true" class="text-nowrap">Rollback to this</a>
									}
								</Authorized>
							</AuthorizeView>
						</div>
						
						@if (string.IsNullOrEmpty(transcriptHistory.DiffWithPrevious))
						{
							<pre class="border rounded bg-light p-3" style="min-height: 44px;">
								@transcriptHistory.TranscriptContent
							</pre>
						}
						else
						{
							<div class="border rounded">
								@((MarkupString)transcriptHistory.DiffWithPrevious)
							</div>
						}
						<hr />
					</div>
				}
			</Column>
		</Row>
	</Container>
}


@code {
	[Parameter]
	public string ComicCode { get; set; } = "";

	private TranscriptHistoryItemViewModel[] _transcriptHistories = new TranscriptHistoryItemViewModel[] { };
	private bool _isLoading;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_isLoading = true;
			_transcriptHistories = await Api.GetTranscriptHistory(ComicCode);
			_isLoading = false;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}

		await base.OnInitializedAsync();
	}

	private async Task RollbackToHistory(int id)
	{
		_isLoading = true;

		try
		{
			string? result = await Api.PostTranscriptRollbackToHistory(ComicCode, id);
			if (!string.IsNullOrEmpty(result))
			{
				ToastService.ShowError(result, "Error");
				_isLoading = false;
				return;
			}

			ToastService.ShowSuccess("Successfully rolled back", "Success");
			_transcriptHistories = await Api.GetTranscriptHistory(ComicCode);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			_isLoading = false;
			return;
		}

		_isLoading = false;
	}
}