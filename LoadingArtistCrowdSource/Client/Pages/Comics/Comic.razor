@page "/comic/{Code}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api
@inject IToastService ToastService

<Container Fluid="false">
	@if (!_loaded)
	{
		<Row>
			<Column>
				<Spinner></Spinner>
			</Column>
		</Row>
	}
	else
	{
		<Row>
			<Column>
				<ComicNavigation ComicPage="_comicPage"></ComicNavigation>
			</Column>
		</Row>

		<Row>
			<Column>
				<div class="d-flex justify-content-center">
					<h1>@_comic.Title</h1>
				</div>
			</Column>
		</Row>

		<Row>
			<Column ColumnSize="ColumnSize.IsHalf.OnFullHD">
				<AuthorizeView Roles="@LoadingArtistCrowdSource.Shared.Enums.Roles.AdminMod">
					<Authorized>
						<Row Class="mb-3">
							<Column>
								<h3>Moderator</h3>
								
								<NavLink href="@($"/comic/{Uri.EscapeDataString(Code)}/edit")" class="btn btn-link">Edit Metadata</NavLink>
								<NavLink href="@($"/comic/{Uri.EscapeDataString(Code)}/history")" class="btn btn-link">Comic History</NavLink>
								<Button Type="ButtonType.Button" Color="Color.Danger" Class="btn-link" Clicked="() => _deleteAllFieldDataModal.Show()">Delete All Field Data</Button>

								<Modal @ref="_deleteAllFieldDataModal">
									<ModalBackdrop></ModalBackdrop>
									<ModalBody>
										Are you sure you want to delete all field data for this comic?
									</ModalBody>
									<ModalFooter>
										<div class="d-flex justify-content-between">
											<Button Type="ButtonType.Button" Color="Color.Danger" Clicked="HandleDeleteAllFieldData" Disabled="_deleteAllFieldDataLoading">Delete</Button>
											<Button Type="ButtonType.Button" Color="Color.Light" Clicked="() => _deleteAllFieldDataModal.Hide()">Cancel</Button>
										</div>
									</ModalFooter>
								</Modal>
							</Column>
						</Row>
					</Authorized>
				</AuthorizeView>
				<Row Class="mb-3">
					<Column>
						<h3>Metadata</h3>
						
						<ComicMetadata Comic="_comic"></ComicMetadata>
					</Column>
				</Row>
				<Row Class="mb-3">
					<Column>
						<h3>Comic Image</h3>
						<div>
							<center>
								<a href="@_comic.Permalink" target="_blank">
									<img src="@_comic.ImageUrlSrc" width="550" title="Comic image" alt="Comic image" class="comic-image img-thumbnail" />
								</a>
							</center>
						</div>
					</Column>
				</Row>
			</Column>
			<Column ColumnSize="ColumnSize.IsHalf.OnFullHD">
				<Row Class="mb-3">
					<Column>
						<h3>Crowd Sourced Data</h3>
						<div class="entry-list">
							<FieldEntries ComicCode="@_comic.Code" 
										  ComicImgSrc="@_comic.ImageUrlSrc" 
										  ComicProgress="@_comicPage.Progress" 
										  Fields="_comic.ComicFields" 
										  OnComicNeedsRefresh="HandleComicNedsRefresh" />
						</div>
					</Column>
				</Row>
				<Row Class="mb-3">
					<Column>
						<h3>Transcript</h3>
						<ComicTranscriptView Transcript="_comic.Transcript"
											 ComicCode="@_comic.Code"
											 ComicImgSrc="@_comic.ImageUrlSrc"
											 OnComicNeedsRefresh="HandleComicNedsRefresh" />
					</Column>
				</Row>
				<Row Class="mb-3">
					<Column>
						<h3>Additional Tags</h3>
						<ComicTagsView Tags="_comic.Tags"
									   ComicCode="@_comic.Code"
									   ComicImgSrc="@_comic.ImageUrlSrc"
									   OnComicNeedsRefresh="HandleComicNedsRefresh" />
					</Column>
				</Row>
			</Column>
		</Row>
	}
</Container>

@code {
	private string _code = "";
	[Parameter]
	public string Code { get; set; } = "";

	private bool _loaded;
	private ComicPageViewModel _comicPage = new ComicPageViewModel();
	private ComicViewModel _comic => _comicPage.ComicViewModel;
	private Modal _deleteAllFieldDataModal = new Modal();
	private bool _deleteAllFieldDataLoading;

	protected override async Task OnParametersSetAsync()
	{
		if (_code != Code)
		{
			_code = Code;
			await GetComic();
		}
		await base.OnParametersSetAsync();
	}

	private async Task GetComic()
	{
		try
		{
			_loaded = false;
			_comicPage = await Api.GetComic(Code);
			_loaded = true;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
	}

	private async Task HandleComicNedsRefresh()
	{
		try
		{
			//_loaded = false;
			_comicPage = await Api.GetComic(Code);
			//_loaded = true;
			StateHasChanged();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
	}

	private async Task HandleDeleteAllFieldData()
	{
		try
		{
			_deleteAllFieldDataLoading = true;
			await Api.DeleteAllComicFieldData(Code);
			_deleteAllFieldDataLoading = false;
			ToastService.ShowSuccess("Done.");
		}
		catch
		{
			ToastService.ShowError("There was a problem.");
		}

		_deleteAllFieldDataModal.Hide();
	}
}
