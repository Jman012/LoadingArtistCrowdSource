@page "/comic/{Code}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api

<Container Fluid="false">
	@if (!_loaded)
	{
		<Row>
			<Column>
				<Spinner></Spinner>
			</Column>
		</Row>
	}
	<div class="@(_loaded ? "" : "d-none")">
		<Row>
			<Column>
				<ComicNavigation ComicPage="_comicPage"></ComicNavigation>
			</Column>
		</Row>

		<Row>
			<Column>
				<div class="d-flex justify-content-center">
					<h1>@_comic.Title</h1>
				</div>
			</Column>
		</Row>

		<Row>
			<Column ColumnSize="ColumnSize.IsHalf.OnFullHD">
				<h3>Metadata</h3>
				<AuthorizeView Roles="@LoadingArtistCrowdSource.Shared.Enums.Roles.AdminMod">
					<Authorized>
						<NavLink href="@($"/comic/{Uri.EscapeDataString(Code)}/edit")">Edit Metadata</NavLink>
					</Authorized>
				</AuthorizeView>
				<Table Bordered="true" Narrow="true">
					<TableBody>
						<TableRow>
							<TableHeaderCell>Identifier</TableHeaderCell>
							<TableRowCell>@_comic.Code</TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Number</TableHeaderCell>
							<TableRowCell>@_comic.Id</TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Permalink</TableHeaderCell>
							<TableRowCell><NewTabLink Href="@_comic.Permalink">@_comic.Permalink</NewTabLink></TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Published</TableHeaderCell>
							<TableRowCell>@_comic.ComicPublishedDate.ToString("yyyy-MM-dd mm:dd:ss K")</TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Image</TableHeaderCell>
							<TableRowCell><NewTabLink Href="@_comic.ImageUrlSrc">@_comic.ImageUrlSrc</NewTabLink></TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Thumbnail</TableHeaderCell>
							<TableRowCell>
								<NewTabLink Href="@_comic.ImageThumbnailUrlSrc">
									<img src="@_comic.ImageThumbnailUrlSrc" width="128" height="128" title="Thumbnail" alt="Thumbnail" class="img-fluid" style="max-height: 128px;" />
								</NewTabLink>
							</TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Wide Thumbnail</TableHeaderCell>
							<TableRowCell>
								@if (_comic.ImageWideThumbnailUrlSrc != null)
								{
									<NewTabLink Href="@_comic.ImageWideThumbnailUrlSrc">
										<img src="@_comic.ImageWideThumbnailUrlSrc" height="128" title="Wide Thumbnail" alt="Wide Thumbnail" class="img-fluid" style="max-height: 128px;" />
									</NewTabLink>
								}
								else
								{
									<text>N/A</text>
								}
							</TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Tooltip</TableHeaderCell>
							<TableRowCell>@((MarkupString)(_comic.Tooltip ?? ""))</TableRowCell>
						</TableRow>
						<TableRow>
							<TableHeaderCell>Description</TableHeaderCell>
							<TableRowCell><p>@((MarkupString)(_comic.Description ?? ""))</p></TableRowCell>
						</TableRow>
					</TableBody>
				</Table>

				<h3>Comic Image</h3>
				<p>
					<center>
						<a href="@_comic.ImageUrlSrc" target="_blank">
							<img src="@_comic.ImageUrlSrc" width="550" title="Comic image" alt="Comic image" class="comic-image img-thumbnail" />
						</a>
					</center>
				</p>
			</Column>
			<Column ColumnSize="ColumnSize.IsHalf.OnFullHD">
				<h3>Crowd Sourced Data</h3>
				<div class="entry-list">
					<FieldEntries ComicCode="@_comic.Code" 
								  ComicImgSrc="@_comic.ImageUrlSrc" 
								  ComicProgress="@_comicPage.Progress" 
								  Fields="_comic.ComicFields" 
								  OnComicNeedsRefresh="HandleComicNedsRefresh"></FieldEntries>
				</div>
			</Column>
		</Row>
	</div>
</Container>

@code {
	private string _code = "";
	[Parameter]
	public string Code { get; set; } = "";

	private bool _loaded;
	private ComicPageViewModel _comicPage = new ComicPageViewModel();
	private ComicViewModel _comic => _comicPage.ComicViewModel;

	protected override async Task OnParametersSetAsync()
	{
		if (_code != Code)
		{
			_code = Code;
			await GetComic();
		}
		await base.OnParametersSetAsync();
	}

	private async Task GetComic()
	{
		try
		{
			_comicPage = await Api.GetComic(Code);
			_loaded = true;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
	}

	private async Task HandleComicNedsRefresh()
	{
		//_loaded = false;
		StateHasChanged();

		try
		{
			_comicPage = await Api.GetComic(Code);
			//_loaded = true;
			StateHasChanged();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
	}
}
