@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.LACSApi Api
@inject IJSRuntime JsRuntime

<Modal @ref="modal">
	<ModalBackdrop />
	<ModalContent Size="ModalSize.ExtraLarge">
		<ModalHeader>
			<ModalTitle>@comicField.Name</ModalTitle>
			<CloseButton Clicked="Close"></CloseButton>
		</ModalHeader>
		<ModalBody>
			<AuthorizeView>
				<NotAuthorized>
					<a href="authentication/login">Log in</a> to help crowd source information for LoadingArtist comics!
				</NotAuthorized>
				<Authorized>
					<EditForm @ref="form" Model="userEntry" Context="editContext">
						<DataAnnotationsValidator />
						<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

						<div class="container">
							<div class="row">
								<div class="col-6">
									<img src="@comicImgSrc" class="img-fluid img-thumbnail" />
								</div>
								<div class="col-6">
									<h5>Your Answer</h5>
									@switch (comicField.Type)
									{
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkbox:
											<div class="form-group form-check">
												<InputCheckbox id="checkbox"
															   name="checkbox"
															   class="form-check-input"
															   @bind-Value="boolAnswer" />
												<label for="checkbox" class="form-check-label">@comicField.Name</label>
											</div>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:

											for (int i = 0; i < comicField.Options.Count; i++)
											{
												var index = i;
												var option = comicField.Options[index];
												var valueWrapper = boolAnswers[index];
												<div class="form-group form-check">
													<InputCheckbox id="@($"checkbox-{option.Code}")"
																   name="@($"checkbox-{option.Code}")"
																   class="form-check-input"
																   @bind-Value="@valueWrapper.Value" />
													<label for="@($"checkbox-{option.Code}")" class="form-check-label">@option.Text</label>
												</div>
											}
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
											<div class="form-group">
												<label for="select">@comicField.Name</label>

												<InputSelect id="select" name="select" class="form-control" @bind-Value="stringAnswer">
													<option value=""></option>
													@foreach (var option in comicField.Options)
															{
														<option value="@option.Code">@option.Text</option>
															}
												</InputSelect>
											</div>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
											<div class="form-group">
												<label for="textarea">@comicField.Name</label>

												<InputTextArea id="textarea"
															   name="textarea"
															   class="form-control"
															   rows="3"
															   @bind-Value="stringAnswer" />
											</div>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
											<div class="form-group">
												<label for="textfield">@comicField.Name</label>

												<InputText id="textfield"
														   name="textfield"
														   class="form-control"
														   @bind-Value="stringAnswer" />
											</div>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
											<div class="form-group">
												<label for="textfield">@comicField.Name</label>

												<InputNumber id="textfield"
															 name="textfield"
															 class="form-control"
															 @bind-Value="intAnswer" />
											</div>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
											<div class="form-group">
												<label for="select">@comicField.Name</label>

												<InputMultiSelect id="select"
																  name="select"
																  class="form-control"
																  size="8"
																  @bind-Value="stringAnswers2"
																  Options="comicField.Options.Select(o => KeyValuePair.Create(o.Code, o.Text)).ToArray()" />
											</div>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
											<InputRadioGroup @bind-Value="stringAnswer">
												@foreach (var option in comicField.Options)
														{
													<div class="form-check">
														<InputRadio id="@($"radio-{option.Code}")"
																	name="@($"radio-{option.Code}")"
																	Value="option.Code" />
														<label class="form-check-label" for="@($"radio-{option.Code}")">
															@option.Text
														</label>
													</div>
														}
											</InputRadioGroup>
											break;
										case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:
											break;
									}
									<hr />
									<h5>Description</h5>
									<p>
										@comicField.ShortDescription
									</p>
									<p>
										@comicField.LongDescription
									</p>
									@if (comicField.Options.Any())
									{
										<hr />
										<h5>Option Descriptions</h5>
										<div class="list-group">
											@foreach (var option in comicField.Options)
											{
												<div class="list-group-item">
													<h6>@option.Text</h6>
													<p>@option.Description</p>
													<p>
														<NewTabLink Href="@option.URL">@option.URL</NewTabLink>
													</p>
												</div>
											}
										</div>
									}
								</div>
							</div>
						</div>
					</EditForm>
				</Authorized>
			</AuthorizeView>
		</ModalBody>
		<ModalFooter>
			@if (isSubmitting)
			{
				<div class="spinner-border" role="status">
					<span class="sr-only">Loading...</span>
				</div>
			}
			@if (userName != null)
			{
				<button type="submit" class="btn btn-primary" disabled="@isSubmitting" @onclick="HandleSubmit">
					@if (userEntry.CreatedDate == default)
					{
						<text>Add Answer</text>
					}
					else
					{
						<text>Edit Answer</text>
					}
				</button>
			}
			<button type="button" form="FieldOptionEditModal" class="btn btn-light" @onclick="() => Close()">Close</button>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {

	public struct State
	{
		public ComicFieldViewModel ComicField { get; set; }
		public string ComicCode { get; set; }
		public string ComicImgSrc { get; set; }
	}

	private class ValueWrapper<T>
	{
		public T Value { get; set; }
		public ValueWrapper(T value)
		{
			Value = value;
		}
	}

	[Parameter]
	public EventCallback<State> OnSubmit { get; set; }

	private Modal modal { get; set; } = new Modal();
	private EditForm form { get; set; } = new EditForm();
	private string? userName { get; set; }
	private ComicFieldViewModel comicField { get; set; } = new ComicFieldViewModel();
	private string comicCode { get; set; } = "";
	private string comicImgSrc { get; set; } = "";
	private CrowdSourcedFieldUserEntryViewModel userEntry { get; set; } = new CrowdSourcedFieldUserEntryViewModel();
	private bool isSubmitting { get; set; } = false;

	#region Answer Variables
	private bool boolAnswer { get; set; }
	private List<ValueWrapper<bool>> boolAnswers { get; set; } = new List<ValueWrapper<bool>>();
	private string stringAnswer { get; set; } = "";
	private List<ValueWrapper<string>> stringAnswers { get; set; } = new List<ValueWrapper<string>>();
	private string[] stringAnswers2 { get; set; } = new string[] { };
	private int? intAnswer { get; set; }
	#endregion Answer Variables

	protected override async Task OnInitializedAsync()
	{
		var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
		if (user.Identity!.IsAuthenticated)
		{
			userName = user.Identity!.Name;
		}
		await base.OnInitializedAsync();
	}

	public void Open(State state)
	{
		comicField = state.ComicField;
		comicCode = state.ComicCode;
		comicImgSrc = state.ComicImgSrc;

		if (userName != null)
		{
			userEntry = comicField.UserEntries
				.FirstOrDefault(cf => cf.CreatedByUser.UserName == userName)
				?? new CrowdSourcedFieldUserEntryViewModel();
		}

		var setValues = new HashSet<string>(userEntry.Values);

		switch (comicField.Type)
		{
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkbox:
				boolAnswer = bool.TryParse(userEntry.Values.FirstOrDefault(), out bool isChecked) ? isChecked : false;
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
				boolAnswers = comicField.Options.Select(o => new ValueWrapper<bool>(setValues.Contains(o.Code))).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
				stringAnswer = userEntry.Values.FirstOrDefault() ?? "";
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
				var first = userEntry.Values.FirstOrDefault();
				int num = 0;
				intAnswer = first != null && int.TryParse(first!, out num) ? num : null;
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
				stringAnswers2 = userEntry.Values.ToArray();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
				stringAnswers = userEntry.Values.Select(v => new ValueWrapper<string>(v)).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:

				break;
		}

		StateHasChanged();
		modal.Show();
	}

	public void Close()
	{
		modal.Hide();
	}

	private async Task HandleSubmit()
	{
		if (!form.EditContext!.Validate())
		{
			return;
		}

		List<string> values = new List<string>();
		switch (comicField.Type)
		{
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkbox:
				values = new List<string>()
			{
					boolAnswer.ToString(),
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
				values = comicField.Options.Zip(boolAnswers).Where(x => x.Second.Value).Select(x => x.First.Code).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
				values = new List<string>()
			{
					stringAnswer,
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
				values = stringAnswers2.ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
				values = stringAnswers.Select(sa => sa.Value).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:
				break;
		}

		isSubmitting = true;
		StateHasChanged();
		var result = await Api.PutUserEntryValues(comicCode, comicField.Code, values);
		isSubmitting = false;
		StateHasChanged();

		if (!string.IsNullOrEmpty(result))
		{
			await JsRuntime.InvokeVoidAsync("alert", $"There was a problem saving your answer: ${result}");
			return;
		}

		await OnSubmit.InvokeAsync(new State()
		{
			ComicField = comicField,
		});
		modal.Hide();
	}
}