@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.LACSApi Api
@inject IJSRuntime JsRuntime
@inject IToastService ToastService

<Modal @ref="modal" Class="custom-modal-dialog-scrollable">
	<ModalBackdrop />
	<ModalContent Size="ModalSize.Large">
		<ModalHeader>
			<ModalTitle>@comicField.Name</ModalTitle>
			<CloseButton Clicked="Close"></CloseButton>
		</ModalHeader>
		<ModalBody>
			<EditForm @ref="form" Model="userEntry" Context="editContext">
				<DataAnnotationsValidator />

				<Container Fluid="false">
					<Row>
						<Column Display="Display.None.Block.OnWidescreen" Class="border-right">
							<img src="@comicImgSrc" class="img-fluid" />
						</Column>
						<Column>
							<AuthorizeView>
								<NotAuthorized>
									<a href="authentication/login">Log in</a> to help crowd source information for LoadingArtist comics!
								</NotAuthorized>
								<Authorized>
									<h5>Your Response</h5>
									<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
									@* Weird bug where multi select's UI and option[selected] become desynced. Force-redraw on modal open to fix. *@
									@if (modal.Visible)
									{
										switch (comicField.Type)
										{
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
												for (int i = 0; i < comicField.Options.Count; i++)
												{
													var index = i;
													var option = comicField.Options[index];
													var valueWrapper = boolAnswers[index];
													<div class="form-group form-check">
														<InputCheckbox id="@($"checkbox-{option.Code}")"
																	name="@($"checkbox-{option.Code}")"
																	class="form-check-input"
																	@bind-Value="@valueWrapper.Value" />
														<label for="@($"checkbox-{option.Code}")" class="form-check-label">@option.Text</label>
													</div>
												}
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
												<div class="form-group">
													<label for="select">@comicField.Name</label>

													<InputSelect id="select" name="select" class="custom-select" @bind-Value="stringAnswer">
														<option value=""></option>
														@foreach (var option in comicField.Options)
																	{
															<option value="@option.Code">@option.Text</option>
																	}
													</InputSelect>
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
												<div class="form-group">
													<label for="textarea">@comicField.Name</label>

													<InputTextArea id="textarea"
																name="textarea"
																class="form-control"
																rows="3"
																@bind-Value="stringAnswer" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
												<div class="form-group">
													<label for="textfield">@comicField.Name</label>

													<InputText id="textfield"
															name="textfield"
															class="form-control"
															@bind-Value="stringAnswer" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
												<div class="form-group">
													<label for="textfield">@comicField.Name</label>

													<InputNumber id="textfield"
																name="textfield"
																class="form-control"
																@bind-Value="intAnswer" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
												<div class="form-group">
													<label for="select">@comicField.Name</label>

													<InputMultiSelect id="select"
																	name="select"
																	class="form-control custom-select"
																	size="10"
																	@bind-Value="stringAnswers2"
																	Options="comicField.Options.Select(o => KeyValuePair.Create(o.Code, o.Text)).ToArray()" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
												<InputRadioGroup @bind-Value="stringAnswer" Name="radio">
													@foreach (var option in comicField.Options)
																{
														<div class="form-check">
															<InputRadio id="@($"radio-{option.Code}")"
																		Name="radio"
																		Value="option.Code" />
															<label class="form-check-label" for="@($"radio-{option.Code}")">
																@option.Text
															</label>
														</div>
																}
												</InputRadioGroup>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:
												break;
										}
									}
								</Authorized>
							</AuthorizeView>
							
							<hr />
							<h5>Description</h5>
							<p>
								@comicField.ShortDescription
							</p>
							<p>
								@comicField.LongDescription
							</p>
							<Table Narrow="true">
								<TableBody>
									<TableRow>
										<TableRowHeader>Date Verified</TableRowHeader>
										<TableRowCell>@comicField.VerifiedEntry?.VerificationDate.ToLocalTime().ToString("yyyy-MM-dd hh:mm:ss tt")</TableRowCell>
									</TableRow>
									<TableRow>
										<TableRowHeader>Submitters</TableRowHeader>
										<TableRowCell>@string.Join(", ", comicField.UserEntries.Select(ue => ue.CreatedByUser.UserName))</TableRowCell>
									</TableRow>
								</TableBody>
							</Table>
							
							@if (comicField.Options.Any())
							{
								<hr />
								<h5>Option Descriptions</h5>
								<ListGroup>
									@foreach (var option in comicField.Options)
									{
										<ListGroupItem>
											<h5>@option.Text</h5>
											<p>@option.Description</p>
											@if (!string.IsNullOrEmpty(option.URL))
											{
												<p>
													<NewTabLink Href="@option.URL">@option.URL</NewTabLink>
												</p>
											}
										</ListGroupItem>
									}
								</ListGroup>
							}
						</Column>
					</Row>
				</Container>
			</EditForm>
		</ModalBody>
		<ModalFooter>
			<div class="w-100 d-flex flex-row justify-content-around flex-wrap">
				<Button Type="ButtonType.Button" Color="Color.Light" Clicked="HandleBack" Disabled="isFirstInFields" Class="mr-2 mb-2 text-nowrap">
					<Icon Name="IconName.AngleLeft"></Icon>
					Back
				</Button>

				<Button Type="ButtonType.Button" Color="Color.Light" Clicked="HandleSkip" Disabled="isLastInFields" Class="mr-2 mb-2 text-nowrap">
					Next&nbsp;
					<Icon Name="IconName.AngleRight"></Icon>
				</Button>

				<Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="@(isSubmitting || userName == null)" Clicked="HandleSubmit" Class="mr-2 mb-2 text-nowrap">
					@if (isSubmitting)
					{
						<Spinner Small="true" Inline="true"></Spinner><text>&nbsp;</text>
					}
					@if (userEntry.CreatedDate == default)
					{
						<text>Add Response</text>
					}
					else
					{
						<text>Edit Response</text>
					}
					&nbsp;<Icon Name="IconName.AngleRight"></Icon>
				</Button>
			</div>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {

	public struct State
	{
		public ComicFieldViewModel ComicField { get; set; }
		public string ComicCode { get; set; }
		public string ComicImgSrc { get; set; }
	}

	public enum CompletionType
	{
		Back,
		SubmitAndNext,
		SkipNext,
		Cancel,
	}

	public struct Completion
	{
		public CompletionType Type;
		public ComicFieldViewModel Field;
	}

	private class ValueWrapper<T>
	{
		public T Value { get; set; }
		public ValueWrapper(T value)
		{
			Value = value;
		}
	}

	[Parameter]
	public EventCallback<Completion> OnSubmit { get; set; }
	[Parameter]
	public IReadOnlyList<ComicFieldViewModel> Fields { get; set; } = new List<ComicFieldViewModel>();

	private Modal modal { get; set; } = new Modal();
	private EditForm form { get; set; } = new EditForm();
	private string? userName { get; set; }
	private ComicFieldViewModel comicField { get; set; } = new ComicFieldViewModel();
	private string comicCode { get; set; } = "";
	private string comicImgSrc { get; set; } = "";
	private CrowdSourcedFieldUserEntryViewModel userEntry { get; set; } = new CrowdSourcedFieldUserEntryViewModel();
	private bool isSubmitting { get; set; } = false;

	private int indexInFields => Fields.Select((item, index) => new { item, index }).FirstOrDefault(x => x.item.Code == comicField.Code)?.index ?? 0;
	private bool isFirstInFields => indexInFields == 0 && Fields.Count > 0;
	private bool isLastInFields => indexInFields == Fields.Count - 1;

	#region Answer Variables
	private List<ValueWrapper<bool>> boolAnswers { get; set; } = new List<ValueWrapper<bool>>();
	private string stringAnswer { get; set; } = "";
	private List<ValueWrapper<string>> stringAnswers { get; set; } = new List<ValueWrapper<string>>();
	private string[] stringAnswers2 { get; set; } = new string[] { };
	private int? intAnswer { get; set; }
	#endregion Answer Variables

	protected override async Task OnInitializedAsync()
	{
		var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
		if (user.Identity!.IsAuthenticated)
		{
			userName = user.Identity!.Name;
		}
		await base.OnInitializedAsync();
	}

	public void Open(State state)
	{
		comicField = state.ComicField;
		comicCode = state.ComicCode;
		comicImgSrc = state.ComicImgSrc;

		if (userName != null)
		{
			userEntry = comicField.UserEntries
				.FirstOrDefault(cf => cf.CreatedByUser.UserName == userName)
				?? new CrowdSourcedFieldUserEntryViewModel();
		}

		var setValues = new HashSet<string>(userEntry.Values);

		switch (comicField.Type)
		{
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
				boolAnswers = comicField.Options.Select(o => new ValueWrapper<bool>(setValues.Contains(o.Code))).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
				stringAnswer = userEntry.Values.FirstOrDefault() ?? "";
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
				var first = userEntry.Values.FirstOrDefault();
				int num = 0;
				intAnswer = first != null && int.TryParse(first!, out num) ? num : null;
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
				stringAnswers2 = userEntry.Values.ToArray();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
				stringAnswers = userEntry.Values.Select(v => new ValueWrapper<string>(v)).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:

				break;
		}

		StateHasChanged();
		modal.Show();
	}

	public void Close()
	{
		modal.Hide();
	}

	private async Task HandleSubmit()
	{
		List<string> values = new List<string>();
		switch (comicField.Type)
		{
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
				values = comicField.Options.Zip(boolAnswers).Where(x => x.Second.Value).Select(x => x.First.Code).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
				values = new List<string>()
				{
					stringAnswer,
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
				values = new List<string>()
				{
					intAnswer?.ToString() ?? "",
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
				values = stringAnswers2.ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
				values = new List<string>()
				{
					stringAnswer,
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:
				break;
		}

		userEntry.Values = values;
		if (!form.EditContext!.Validate())
		{
			return;
		}

		isSubmitting = true;
		StateHasChanged();
		UserEntrySubmissionResult result;
		try
		{
			result = await Api.PutUserEntryValues(comicCode, comicField.Code, values);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
		catch (System.Net.Http.HttpRequestException ex)
		{
			isSubmitting = false;
			ToastService.ShowError($"There was a problem saving your answer: {ex.Message}");
			return;
		}
		isSubmitting = false;
		StateHasChanged();

		if (result.IsAlertVerified())
		{
			ToastService.ShowSuccess(result.AlertDescription(), result.AlertMessage());
		}
		else
		{
			ToastService.ShowInfo(result.AlertDescription(), result.AlertMessage());
		}

		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.SubmitAndNext,
			Field = comicField,
		});
	}

	private async Task HandleBack()
	{
		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.Back,
			Field = comicField,
		});
	}

	private async Task HandleSkip()
	{
		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.SkipNext,
			Field = comicField,
		});
	}

	public async Task HandleCancel()
	{
		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.Cancel,
			Field = comicField,
		});
	}
}