@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.LACSApi Api
@inject IJSRuntime JsRuntime
@inject IToastService ToastService

<Modal @ref="_modal" Class="custom-modal-dialog-scrollable custom-modal-dialog-scrollable-nooverflow fade">
	<ModalBackdrop />
	<ModalContent Size="ModalSize.ExtraLarge">
		<ModalHeader>
			<ModalTitle>@_comicField.Name</ModalTitle>
			<CloseButton Clicked="Close"></CloseButton>
		</ModalHeader>
		<ModalBody @ref="_modalBody">
			<EditForm @ref="_form" Model="_userEntry" Context="editContext">
				<DataAnnotationsValidator />

				<Container Fluid="false">
					<Row>
						<Column Display="Display.None.Block.OnWidescreen" Class="border-right scrollable-col">
							<img src="@_comicImgSrc" class="img-fluid" />
						</Column>
						<Column Class="scrollable-col">
							<AuthorizeView>
								<NotAuthorized>
									<a href="authentication/login">Log in</a> to help crowd source information for LoadingArtist comics!
								</NotAuthorized>
								<Authorized>
									<div class="d-flex flex-row justify-content-between">
										<h5>@_comicField.Name</h5>
										<div>
											<FieldBadge Field="_comicField" />
										</div>
									</div>
									<p>
										@_comicField.ShortDescription 
										@if (_comicField.Type == CrowdSourcedFieldType.Checkboxes || _comicField.Type == CrowdSourcedFieldType.MultiDropdown)
										{
											<text>&nbsp;Select all that apply.</text>
										}
									</p>
									<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
									@* Weird bug where multi select's UI and option[selected] become desynced. Force-redraw on modal open to fix. *@
									@if (_modal.Visible)
									{
										switch (_comicField.Type)
										{
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
												for (int i = 0; i < _comicField.Options.Count; i++)
												{
													var index = i;
													var option = _comicField.Options[index];
													var valueWrapper = _boolAnswers[index];
													<div class="form-group form-check">
														<InputCheckbox id="@($"checkbox-{option.Code}")"
																	   name="@($"checkbox-{option.Code}")"
																	   class="form-check-input"
																	   @bind-Value="@valueWrapper.Value" />
														<label for="@($"checkbox-{option.Code}")" class="form-check-label">
															@option.Text
															<br />
															<small class="text-muted">
																@option.Description
																@if (!string.IsNullOrEmpty(option.URL))
																{
																	<text>&nbsp;</text><NewTabLink Href="@option.URL">More</NewTabLink>
																}
															</small>
														</label>
													</div>
												}
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
												<div class="form-group">
													<label for="select" class="sr-only">@_comicField.Name</label>

													<BlazoredTypeahead @bind-Value="_stringAnswer"
																	   SearchMethod="HandleOptionsSearch"
																	   ConvertMethod="HandleOptionsConvert"
																	   Debounce="100"
																	   MaximumSuggestions="1000"
																	   EnableDropDown="true"
																	   ShowDropDownOnFocus="true">
														<NotFoundTemplate Context="option">No options with that text exist</NotFoundTemplate>
														<ResultTemplate Context="option">
															<strong>@option.Text</strong>
															<br />
															<small>
																@option.Description
																@if (!string.IsNullOrEmpty(option.URL))
																	{
																	<text>&nbsp;</text><NewTabLink Href="@option.URL" StopPropagation="true">More</NewTabLink>
																	}
															</small>
														</ResultTemplate>
														<SelectedTemplate Context="optionText">
															@_comicField.Options.FirstOrDefault(o => o.Code == optionText)?.Text
														</SelectedTemplate>
													</BlazoredTypeahead>
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
												<div class="form-group">
													<label for="textarea" class="sr-only">@_comicField.Name</label>

													<InputTextArea id="textarea"
																   name="textarea"
																   class="form-control"
																   rows="3"
																   @bind-Value="_stringAnswer" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
												<div class="form-group">
													<label for="textfield" class="sr-only">@_comicField.Name</label>

													<InputText id="textfield"
															   name="textfield"
															   class="form-control"
															   @bind-Value="_stringAnswer" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
												<div class="form-group">
													<label for="textfield" class="sr-only">@_comicField.Name</label>

													<InputNumber id="textfield"
																 name="textfield"
																 class="form-control"
																 @bind-Value="_intAnswer" />
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
												<div class="form-group">
													<label for="select" class="sr-only">@_comicField.Name</label>

													<BlazoredTypeahead @bind-Values="_stringAnswers2"
																	   SearchMethod="HandleOptionsSearch"
																	   ConvertMethod="HandleOptionsConvert"
																	   Debounce="100"
																	   MaximumSuggestions="1000"
																	   EnableDropDown="true"
																	   ShowDropDownOnFocus="true">
														<NotFoundTemplate Context="option">No options with that text exist</NotFoundTemplate>
														<ResultTemplate Context="option">
															<strong>@option.Text</strong>
															<br />
															<small>
																@option.Description
																@if (!string.IsNullOrEmpty(option.URL))
																{
																	<text>&nbsp;</text><NewTabLink Href="@option.URL" StopPropagation="true">More</NewTabLink>
																}
															</small>
														</ResultTemplate>
														<SelectedTemplate Context="optionText">
															@_comicField.Options.FirstOrDefault(o => o.Code == optionText)?.Text
														</SelectedTemplate>
													</BlazoredTypeahead>
												</div>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
												<InputRadioGroup @bind-Value="_stringAnswer" Name="radio">
													@foreach (var option in _comicField.Options)
																{
														<div class="form-check">
															<InputRadio id="@($"radio-{option.Code}")"
																		Name="radio"
																		Value="option.Code"
																		class="form-check-input" />
															<label class="form-check-label" for="@($"radio-{option.Code}")">
																@option.Text
																<br />
																<small class="text-muted">
																	@option.Description
																	@if (!string.IsNullOrEmpty(option.URL))
																				{
																		<text>&nbsp;</text><NewTabLink Href="@option.URL">More</NewTabLink>
																				}
																</small>
															</label>
														</div>
																}
												</InputRadioGroup>
												break;
											case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:
												break;
										}
									}
								</Authorized>
							</AuthorizeView>

							@if (_userEntry.CreatedDate != default)
							{
								var arrayEqualityComparer = new LoadingArtistCrowdSource.Shared.Utilities.ArrayEqualityComparer<string>();
								var totalEntries = _comicField.UserEntries.Count;
								var groupings = _comicField.UserEntries
									.GroupBy(ue => ue.Values.ToArray(), arrayEqualityComparer)
									.OrderByDescending(ueg => ueg.Count());
								<hr />
								<h5>Submissions</h5>
								@foreach (var grouping in groupings)
								{
									int progress = (int)Math.Round((decimal)grouping.Count() / (decimal)totalEntries * 100);
									bool isChosen = _comicField.VerifiedEntry != null && grouping.Key.SequenceEqual(_comicField.VerifiedEntry.Values);

									<Tooltip Text="@(string.Join(", ", grouping.Select(ue => ue.CreatedByUser.UserName)))">
										<div class="@($"lacs-progress {(isChosen ? "chosen" : "")}")">
											<div class="lacs-progress-bar" role="progressbar" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100" style="width: @progress%"></div>
											<div class="lacs-progress-bar-text">
												@string.Join(", ", grouping.Key.Select(v => _comicField.Options.FirstOrDefault(o => o.Code == v)?.Text ?? v))
											</div>
											<div class="lacs-progress-bar-percentage">
												@progress%
											</div>
										</div>
									</Tooltip>
								}
							}

							<hr />
							<h5>Instructions/Description</h5>
							<p>@_comicField.LongDescription</p>
							<Table Narrow="true">
								<TableBody>
									<TableRow>
										<TableRowHeader>Date Verified</TableRowHeader>
										<TableRowCell>@_comicField.VerifiedEntry?.VerificationDate.ToLocalTime().ToString("yyyy-MM-dd hh:mm:ss K")</TableRowCell>
									</TableRow>
									<TableRow>
										<TableRowHeader>Submitters</TableRowHeader>
										<TableRowCell>@string.Join(", ", _comicField.UserEntries.Select(ue => ue.CreatedByUser.UserName))</TableRowCell>
									</TableRow>
								</TableBody>
							</Table>

							<div>
								Missing an option, or want to help correct something?
								<AuthorizeView>
									<Authorized>
										<NewTabLink Href="@($"/feedback/{Uri.EscapeDataString(_comicCode)}/{Uri.EscapeDataString(_comicField.Code)}/create")" NoWrapText="true">Submit Feedback</NewTabLink>
									</Authorized>
									<NotAuthorized>
										<a href="authentication/login">Log in</a> to submit feedback
									</NotAuthorized>
								</AuthorizeView>
							</div>
						</Column>
					</Row>
					<AuthorizeView Roles="@Roles.AdminMod">
						<Authorized>
							<Row>
								<Column>
									<Button Type="ButtonType.Button" Color="Color.Danger" Clicked="@(() => _deleteComicFieldDataModal.Show())">Delete Data</Button>
									<Modal @ref="_deleteComicFieldDataModal">
										<ModalContent>
											<ModalHeader>Are you sure?</ModalHeader>
											<ModalFooter>
												<Button Type="ButtonType.Button" Color="Color.Danger" Clicked="HandleDeleteComicFieldData" Disabled="_isLoadingDeleteComicFieldData">
													@if (_isLoadingDeleteComicFieldData) {
														<Spinner Inline="true" Small="true"></Spinner><text>&nbsp;</text>
													}
													Delete Data
												</Button>
												<Button Type="ButtonType.Button" Color="Color.Light" Clicked="@(() => _deleteComicFieldDataModal.Hide())">Cancel</Button>
											</ModalFooter>
										</ModalContent>
									</Modal>
								</Column>
							</Row>
						</Authorized>
					</AuthorizeView>
				</Container>
			</EditForm>
		</ModalBody>
		<ModalFooter>
			<div class="w-100 d-flex flex-row flex-wrap">
				<Button Type="ButtonType.Button" Color="Color.Light" Clicked="HandleBack" Disabled="_isFirstInFields" Class="mr-2 mb-2 text-nowrap">
					<HelperIcon Name="chevron-left" />
					Back
				</Button>

				<Button Type="ButtonType.Button" Color="Color.Light" Clicked="HandleSkip" Disabled="_isLastInFields" Class="mr-2 mb-2 text-nowrap">
					Next&nbsp;
					<HelperIcon Name="chevron-right" />
				</Button>

				<div class="flex-fill"></div>

				<Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="@(_isSubmitting || _userName == null)" Clicked="HandleSubmit" Class="mr-2 mb-2 text-nowrap">
					@if (_isSubmitting)
					{
						<Spinner Small="true" Inline="true"></Spinner><text>&nbsp;</text>
					}
					@if (_userEntry.CreatedDate == default)
					{
						<text>Add Response</text>
					}
					else
					{
						<text>Edit Response</text>
					}
					&nbsp;<HelperIcon Name="chevron-right" />
				</Button>
			</div>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {

	public struct State
	{
		public ComicFieldViewModel ComicField { get; set; }
		public string ComicCode { get; set; }
		public string ComicImgSrc { get; set; }
	}

	public enum CompletionType
	{
		Back,
		SubmitAndNext,
		SkipNext,
		Cancel,
	}

	public struct Completion
	{
		public CompletionType Type;
		public ComicFieldViewModel Field;
	}

	private class ValueWrapper<T>
	{
		public T Value { get; set; }
		public ValueWrapper(T value)
		{
			Value = value;
		}
	}

	[Parameter]
	public EventCallback<Completion> OnSubmit { get; set; }
	[Parameter]
	public IReadOnlyList<ComicFieldViewModel> Fields { get; set; } = new List<ComicFieldViewModel>();

	private Modal _modal = new Modal();
	private ModalBody _modalBody = new ModalBody();
	private EditForm _form = new EditForm();
	private string? _userName;
	private ComicFieldViewModel _comicField = new ComicFieldViewModel();
	private string _comicCode = "";
	private string _comicImgSrc = "";
	private CrowdSourcedFieldUserEntryViewModel _userEntry = new CrowdSourcedFieldUserEntryViewModel();
	private bool _isSubmitting = false;

	private int _indexInFields => Fields.Select((item, index) => new { item, index }).FirstOrDefault(x => x.item.Code == _comicField.Code)?.index ?? 0;
	private bool _isFirstInFields => _indexInFields == 0 && Fields.Count > 0;
	private bool _isLastInFields => _indexInFields == Fields.Count - 1;

	private Modal _deleteComicFieldDataModal = new Modal();
	private bool _isLoadingDeleteComicFieldData = false;

	#region Answer Variables
	private List<ValueWrapper<bool>> _boolAnswers = new List<ValueWrapper<bool>>();
	private string _stringAnswer = "";
	private IList<string> _stringAnswers2 = new List<string>();
	private int? _intAnswer;
	#endregion Answer Variables

	protected override async Task OnInitializedAsync()
	{
		var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
		if (user.Identity!.IsAuthenticated)
		{
			_userName = user.Identity!.Name;
		}
		await base.OnInitializedAsync();
	}

	public void Open(State state)
	{
		_comicField = state.ComicField;
		_comicCode = state.ComicCode;
		_comicImgSrc = state.ComicImgSrc;

		if (_userName != null)
		{
			_userEntry = _comicField.UserEntries
				.FirstOrDefault(cf => cf.CreatedByUser.UserName == _userName)
				?? new CrowdSourcedFieldUserEntryViewModel();
		}

		var setValues = new HashSet<string>(_userEntry.Values);

		switch (_comicField.Type)
		{
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
				_boolAnswers = _comicField.Options.Select(o => new ValueWrapper<bool>(setValues.Contains(o.Code))).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
				_stringAnswer = _userEntry.Values.FirstOrDefault() ?? "";
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
				var first = _userEntry.Values.FirstOrDefault();
				int num = 0;
				_intAnswer = first != null && int.TryParse(first!, out num) ? num : null;
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
				_stringAnswers2 = _userEntry.Values.ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
				_stringAnswer = _userEntry.Values.FirstOrDefault() ?? "";
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:

				break;
		}

		StateHasChanged();
		_modal.Show();
	}

	public void Close()
	{
		_modal.Hide();
	}

	private async Task HandleSubmit()
	{
		List<string> values = new List<string>();
		switch (_comicField.Type)
		{
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Checkboxes:
				values = _comicField.Options.Zip(_boolAnswers).Where(x => x.Second.Value).Select(x => x.First.Code).ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Dropdown:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextarea:
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.FreeformTextfield:
				values = new List<string>()
				{
					_stringAnswer,
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.IntegerNumber:
				values = new List<string>()
				{
					_intAnswer?.ToString() ?? "",
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.MultiDropdown:
				values = _stringAnswers2.ToList();
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.RadioButtons:
				values = new List<string>()
				{
					_stringAnswer,
				};
				break;
			case LoadingArtistCrowdSource.Shared.Enums.CrowdSourcedFieldType.Section:
				break;
		}

		_userEntry.Values = values;
		if (!_form.EditContext!.Validate())
		{
			return;
		}

		_isSubmitting = true;
		StateHasChanged();
		UserEntrySubmissionResult result;
		try
		{
			result = await Api.PutUserEntryValues(_comicCode, _comicField.Code, values);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
		catch (System.Net.Http.HttpRequestException ex)
		{
			_isSubmitting = false;
			ToastService.ShowError($"There was a problem saving your answer: {ex.Message}");
			return;
		}
		_isSubmitting = false;
		StateHasChanged();

		if (result.IsAlertVerified())
		{
			ToastService.ShowSuccess(result.AlertDescription(), result.AlertMessage());
		}
		else
		{
			ToastService.ShowInfo(result.AlertDescription(), result.AlertMessage());
		}

		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.SubmitAndNext,
			Field = _comicField,
		});
		await ScrollModalBodyToTop();
	}

	private async Task HandleBack()
	{
		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.Back,
			Field = _comicField,
		});
		await ScrollModalBodyToTop();
	}

	private async Task HandleSkip()
	{
		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.SkipNext,
			Field = _comicField,
		});
		await ScrollModalBodyToTop();
	}

	public async Task HandleCancel()
	{
		await ScrollModalBodyToTop();
		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.Cancel,
			Field = _comicField,
		});
	}

	private async Task ScrollModalBodyToTop()
	{
		await JsRuntime.InvokeVoidAsync("ScrollToTop", ".modal-body");
	}

	private Task<IEnumerable<CrowdSourcedFieldDefinitionOptionViewModel>> HandleOptionsSearch(string searchString)
	{
		var results = _comicField.Options
			.Where(o => o.Text.Contains(searchString, StringComparison.OrdinalIgnoreCase) 
						|| o.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			.ToList();
		return Task.FromResult<IEnumerable<CrowdSourcedFieldDefinitionOptionViewModel>>(results);
	}
	
	private string HandleOptionsConvert(CrowdSourcedFieldDefinitionOptionViewModel option)
	{
		return option.Code;
	}

	private async Task HandleDeleteComicFieldData()
	{
		_isLoadingDeleteComicFieldData = true;
		try
		{
			await Api.DeleteComicFieldData(_comicCode, _comicField.Code);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
		catch
		{
			ToastService.ShowError("There was an error deleting the comic field data");
			return;
		}
		finally 
		{
			_isLoadingDeleteComicFieldData = false;
		}

		await OnSubmit.InvokeAsync(new Completion()
		{
			Type = CompletionType.Cancel,
			Field = _comicField,
		});
		await ScrollModalBodyToTop();
	}
}