@page "/comic/{Code}/edit"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles = LoadingArtistCrowdSource.Shared.Enums.Roles.AdminMod)]
@inject Services.LACSApi Api
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<Container Fluid="false">
	<Row>
		<Column>
			<h3>Edit: </h3>

			@if (_comic.Code == "")
			{
				<Spinner></Spinner>
			}
			else
			{
				<EditForm Model="_comic" OnValidSubmit="HandleValidSubmit">
					<DataAnnotationsValidator />
					<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

					@*<FormNumber @bind-Value="_comic.Id" Disabled="true"></FormNumber>*@
					<FormTextfield @bind-Value="_comic.Code"></FormTextfield>
					<FormTextfield @bind-Value="_comic.Permalink"></FormTextfield>
					@*<FormTextfield Value="@_comic.ComicPublishedDate.ToString()" Disabled="true"></FormTextfield>*@
					<FormTextfield @bind-Value="_comic.Title"></FormTextfield>
					<FormTextarea @bind-Value="_comic.Tooltip" rows="5"></FormTextarea>
					<FormTextarea @bind-Value="_comic.Description" rows="5"></FormTextarea>
					<FormTextfield @bind-Value="_comic.ImageUrlSrc"></FormTextfield>
					<FormTextfield @bind-Value="_comic.ImageThumbnailUrlSrc"></FormTextfield>
					<FormTextfield @bind-Value="_comic.ImageWideThumbnailUrlSrc"></FormTextfield>

					<Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="_isSubmitting">
						@if (_isSubmitting)
						{
							<Spinner Inline="true" Small="true"></Spinner>
						}
						Save
					</Button>
					<Button Color="Color.Light" Clicked="HandleCancel">Back</Button>
				</EditForm>
			}
		</Column>
	</Row>
</Container>

@code {
	[Parameter]
	public string Code { get; set; } = "";

	private ComicViewModel _comic = new ComicViewModel();
	private bool _isSubmitting;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_comic = (await Api.GetComic(Code)).ComicViewModel;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}

		await base.OnInitializedAsync();
	}

	private async Task HandleValidSubmit()
	{
		_isSubmitting = true;
		try
		{
			// Fix for bypassing validation
			_comic.Transcript.TranscriptContent = "a";
			
			await Api.PutComicMetadata(Code, _comic);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
		_isSubmitting = false;

		ToastService.ShowSuccess("The comic metadata has been updated");
		NavigationManager.NavigateTo("/comic/" + Uri.EscapeDataString(Code));
	}

	private void HandleCancel()
	{
		NavigationManager.NavigateTo("/comic/" + Uri.EscapeDataString(Code));
	}
}
