@page "/feedback"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject Services.LACSApi Api

<h1>Feedback</h1>

@if (_isLoading)
{
	<Spinner></Spinner>
}
else
{
	<p>
		Submit feedback requests to improve crowd-sourced data fields. 
		This is useful when the available options do not adequately describe
		a certain comic, or to improve descriptions and examples or the
		field. Submit feedback from the comic page, when answering a field.
	</p>

	<h2>Pending</h2>
	<p>Submitted feedback items will appear here that are pending moderator review. We will get to these shortly.</p>
	<BlazorTable.Table TableItem="FeedbackViewModel" Items="_pendingFeedbacks" PageSize="15">
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Comic" Field="@(c => c.ComicCode)" Sortable="true" Filterable="true">
			<Template>
				<NavLink href="@($"/comic/{Uri.EscapeDataString(context.ComicCode)}")">@context.ComicCode</NavLink>
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Field" Field="@(c => c.FieldCode)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Created Date" Field="@(c => c.CreatedDate)" Sortable="true" Filterable="true">
			<Template>
				@context.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss K")
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Comment" Field="@(c => c.Comment)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>

	<h2>Completed</h2>
	<p>Completed feedback items will appear here that have been reviewed. Thanks for the contributions!</p>
	<BlazorTable.Table TableItem="FeedbackViewModel" Items="_completedFeedbacks" PageSize="15">
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Comic" Field="@(c => c.ComicCode)" Sortable="true" Filterable="true">
			<Template>
				<NavLink href="@($"/comic/{Uri.EscapeDataString(context.ComicCode)}")">@context.ComicCode</NavLink>
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Field" Field="@(c => c.FieldCode)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Created Date" Field="@(c => c.CreatedDate)" Sortable="true" Filterable="true">
			<Template>
				@context.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss K")
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Comment" Field="@(c => c.Comment)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Completion Date" Field="@(c => c.CompletionDate)" Sortable="true" Filterable="true">
			<Template>
				@context.CompletionDate?.ToString("yyyy-MM-dd HH:mm:ss K")
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Completed By" Field="@(c => c.CompletedByUser!.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Completion Type" Field="@(c => c.CompletionType)" Sortable="true" Filterable="true">
			<Template>
				@Utilities.GetEnumDescription(@context.CompletionType!)
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Column TableItem="FeedbackViewModel" Title="Completion Comment" Field="@(c => c.CompletionComment)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>
}

@code {
	private FeedbackViewModel[] _pendingFeedbacks = new FeedbackViewModel[] { };
	private FeedbackViewModel[] _completedFeedbacks = new FeedbackViewModel[] { };
	private bool _isLoading;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_isLoading = true;
			var feedbacks = await Api.GetFeedbackList();
			_pendingFeedbacks = feedbacks.Where(f => f.CompletionDate == null).ToArray();
			_completedFeedbacks = feedbacks.Where(f => f.CompletionDate != null).ToArray();
			_isLoading = false;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}

		await base.OnInitializedAsync();
	}
}