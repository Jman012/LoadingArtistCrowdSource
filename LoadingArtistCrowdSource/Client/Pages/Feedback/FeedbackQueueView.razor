@page "/feedbackqueue/{ComicCode}/{FieldCode}/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles = LoadingArtistCrowdSource.Shared.Enums.Roles.AdminMod)]
@inject Services.LACSApi Api
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<Container Fluid="false">
	<Row>
		<Column>
			<h1>Feedback Review</h1>

			<Table>
				<TableRow>
					<TableHeaderCell>Comic</TableHeaderCell>
					<TableRowCell>
						<NavLink href="@($"/comic/{@_feedbackVM.ComicCode}")">@_feedbackVM.ComicCode</NavLink>
					</TableRowCell>
				</TableRow>
				<TableRow>
					<TableHeaderCell>Field</TableHeaderCell>
					<TableRowCell>
						<NavLink href="@($"/field/{@_feedbackVM.FieldCode}")">@_feedbackVM.FieldCode</NavLink>
					</TableRowCell>
				</TableRow>
				<TableRow>
					<TableHeaderCell>Id</TableHeaderCell>
					<TableRowCell>
						@_feedbackVM.Id
					</TableRowCell>
				</TableRow>
				<TableRow>
					<TableHeaderCell>Created By</TableHeaderCell>
					<TableRowCell>
						@_feedbackVM.CreatedByUser.UserName
					</TableRowCell>
				</TableRow>
				<TableRow>
					<TableHeaderCell>Created Date</TableHeaderCell>
					<TableRowCell>
						@_feedbackVM.CreatedDate
					</TableRowCell>
				</TableRow>
				<TableRow>
					<TableHeaderCell>Comment</TableHeaderCell>
					<TableRowCell>
						@_feedbackVM.Comment
					</TableRowCell>
				</TableRow>
			</Table>

			<EditForm Model="_feedbackVM" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator />
				<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

				<FormTextarea @bind-Value="_feedbackVM.CompletionComment"></FormTextarea>
				<FormSelect @bind-Value="_feedbackVM.CompletionType">
					<SelectOptionsFromEnum Field="_feedbackVM.CompletionType ?? default" IncludeEmpty="true"></SelectOptionsFromEnum>
				</FormSelect>

				<Button Type="ButtonType.Submit" Color="Color.Primary">
					@if (_isSubmitting)
					{
						<Spinner Small="true" Inline="true"></Spinner>
					}
					else
					{
						<HelperIcon Name="plus" />
					}
					&nbsp;Submit
				</Button>
				<NavLink href="/feedbackqueue" class="btn btn-light">Cancel</NavLink>
			</EditForm>
		</Column>
	</Row>
</Container>

@code {
	[Parameter]
	public string ComicCode { get; set; } = "";
	[Parameter]
	public string FieldCode { get; set; } = "";
	[Parameter]
	public int Id { get; set; }

	private FeedbackViewModel _feedbackVM = new FeedbackViewModel();
	private bool _isSubmitting;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_isSubmitting = true;
			_feedbackVM = await Api.GetFeedback(ComicCode, FieldCode, Id);
			_isSubmitting = false;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}

		await base.OnInitializedAsync();
	}

	private async Task HandleValidSubmit()
	{
		string? result;
		try
		{
			result = await Api.PostCompleteFeedback(ComicCode, FieldCode, Id, _feedbackVM);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}

		if (!string.IsNullOrEmpty(result))
		{
			ToastService.ShowError(result, "Error");
		}
		else
		{
			ToastService.ShowSuccess("The feedback has been completed", "Success");
			NavigationManager.NavigateTo("/feedbackqueue");
		}
	}
}