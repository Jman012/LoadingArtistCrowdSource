@page "/field"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LoadingArtistCrowdSource.Shared
@using LoadingArtistCrowdSource.Shared.Models
@attribute [Authorize(Roles = LoadingArtistCrowdSource.Shared.Enums.Roles.AdminMod)]
@inject Services.LACSApi Api
@inject IToastService ToastService

<div class="d-flex">
	<h1>Fields</h1>
	<div class="flex-fill"></div>
	@if (_hasReordered)
	{
		<div>
			<Button Color="Color.Primary" Clicked="HandleSaveFieldOrder" class="mr-1">
				@if (_isSavingReorder)
				{
					<Spinner Small="true" Inline="true"></Spinner>
				}
				else
				{
					<HelperIcon Name="save" />
				}
				Save Order
			</Button>
		</div>	
	}
	<div>
		<NavLink class="btn btn-primary" href="field/new">
			<HelperIcon Name="plus" /> New Field
		</NavLink>
	</div>
</div>

@if (_activeFields == null)
{
	<Spinner></Spinner>
}
else
{
	<h3>Active Fields</h3>
	<table class="table table-sm" ondragover="event.preventDefault();">
		<thead>
			<tr>
				<th></th>
				<th>Name</th>
				<th>Type</th>
				<th>Created By</th>
				<th>Created</th>
				<th>Last Updated By</th>
				<th>Last Updated</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var field in _activeFields)
			{
				<tr draggable="true" @key="field.Code" @ondragstart="() => HandleDragStart(field)" @ondrop="() => HandleDragDrop(field)">
					<td class="@($"grabbable {(_draggingField == field ? "active" : "")}")">
						<SemanticIcon Name="more-vertical" Title="Grab to drag and re-order" />
					</td>
					<td>
						@if (field.Type == CrowdSourcedFieldType.Section)
						{
							<strong>@field.Name</strong>
						}
						else
						{
							@field.Name
						}
					</td>
					<td>@field.Type</td>
					<td>@field.CreatedByUser.UserName</td>
					<td>@field.CreatedDate</td>
					<td>@field.LastUpdatedByUser.UserName</td>
					<td>@field.LastUpdatedDate</td>
					<td>
						<NavLink class="nav-link text-nowrap" href="@($"field/{Uri.EscapeDataString(field.Code)}")">
							<HelperIcon Name="edit" /> Edit
						</NavLink>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<h3>Inactive Fields</h3>
	<BlazorTable.Table TableItem="CrowdSourcedFieldDefinitionViewModel" Items="_inactiveFields" PageSize="15">
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Name" Field="@(fd => fd.Name)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Type" Field="@(fd => fd.Type)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created By" Field="@(fd => fd.CreatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created" Field="@(fd => fd.CreatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated By" Field="@(fd => fd.LastUpdatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated" Field="@(fd => fd.LastUpdatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="" Field="@(fd => fd.Code)" Sortable="false" Filterable="false">
			<Template>
				<NavLink class="nav-link text-nowrap" href="@($"field/{Uri.EscapeDataString(context.Code)}")">
					<HelperIcon Name="edit" /> Edit
				</NavLink>
			</Template>
		</BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>

	<h3>Deleted Fields</h3>
	<BlazorTable.Table TableItem="CrowdSourcedFieldDefinitionViewModel" Items="_deletedFields" PageSize="15">
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Name" Field="@(fd => fd.Name)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Type" Field="@(fd => fd.Type)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created By" Field="@(fd => fd.CreatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created" Field="@(fd => fd.CreatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated By" Field="@(fd => fd.LastUpdatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated" Field="@(fd => fd.LastUpdatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>
}

@code {
	private CrowdSourcedFieldDefinitionViewModel[]? _activeFields = null;
	private CrowdSourcedFieldDefinitionViewModel[]? _inactiveFields = null;
	private CrowdSourcedFieldDefinitionViewModel[]? _deletedFields = null;
	private CrowdSourcedFieldDefinitionViewModel? _draggingField = null;
	private bool _hasReordered = false;
	private bool _isSavingReorder = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var allFields = await Api.GetFields();
			_activeFields = allFields
				.Where(f => f.IsActive && !f.IsDeleted)
				.OrderBy(f => f.DisplayOrder)
				.ToArray();
			_inactiveFields = allFields
				.Where(f => !f.IsActive && !f.IsDeleted)
				.OrderBy(f => f.DisplayOrder)
				.ToArray();
			_deletedFields = allFields
				.Where(f => f.IsDeleted)
				.OrderBy(f => f.DisplayOrder)
				.ToArray();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
	}

	protected void HandleDragStart(CrowdSourcedFieldDefinitionViewModel field)
	{
		_draggingField = field;
	}

	protected void HandleDragDrop(CrowdSourcedFieldDefinitionViewModel field)
	{
		if (_draggingField == null || _activeFields == null)
		{
			return;
		}
		if (field.Code == _draggingField.Code)
		{
			_draggingField = null;
			return;
		}

		var listActiveFields = _activeFields.ToList();
		var idxDragging = listActiveFields.IndexOf(_draggingField);
		var idxDrop = listActiveFields.IndexOf(field);
		listActiveFields.RemoveAt(idxDragging);
		listActiveFields.Insert(idxDrop, _draggingField);
		_activeFields = listActiveFields.ToArray();

		_draggingField = null;
		_hasReordered = true;
	}

	private async Task HandleSaveFieldOrder()
	{
		_isSavingReorder = true;
		string? result = await Api.PutFieldPositions(_activeFields!.Select(f => f.Code).ToArray());
		if (!string.IsNullOrEmpty(result))
		{
			ToastService.ShowError(result, "Error");
		}
		else
		{
			_isSavingReorder = false;
			_hasReordered = false;
			ToastService.ShowSuccess("The order of fields has been updated.", "Success");
		}
	}
}
