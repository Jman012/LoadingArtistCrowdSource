@page "/fields"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LoadingArtistCrowdSource.Shared
@using LoadingArtistCrowdSource.Shared.Models
@inject Services.LACSApi Api

<h1>Fields</h1>

@if (activeFields == null)
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border" role="status">
			<span class="sr-only">Loading...</span>
		</div>
	</div>
}
else
{
	<h3>Active Fields</h3>
	<BlazorTable.Table TableItem="CrowdSourcedFieldDefinitionViewModel" Items="activeFields" PageSize="15">
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Name" Field="@(c => c.Name)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Type" Field="@(c => c.Type)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created By" Field="@(c => c.CreatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created" Field="@(c => c.CreatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated By" Field="@(c => c.LastUpdatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated" Field="@(c => c.LastUpdatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>

	<h3>Inactive Fields</h3>
	<BlazorTable.Table TableItem="CrowdSourcedFieldDefinitionViewModel" Items="inactiveFields" PageSize="15">
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Name" Field="@(c => c.Name)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Type" Field="@(c => c.Type)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created By" Field="@(c => c.CreatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Created" Field="@(c => c.CreatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated By" Field="@(c => c.LastUpdatedByUser.UserName)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Column TableItem="CrowdSourcedFieldDefinitionViewModel" Title="Last Updated" Field="@(c => c.LastUpdatedDate)" Sortable="true" Filterable="true"></BlazorTable.Column>
		<BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true"></BlazorTable.Pager>
	</BlazorTable.Table>
}

@code {
	private CrowdSourcedFieldDefinitionViewModel[]? activeFields = null;
	private CrowdSourcedFieldDefinitionViewModel[]? inactiveFields = null;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			activeFields = (await Api.GetFields())
				.Where(f => f.IsActive)
				.OrderBy(f => f.DisplayOrder)
				.ToArray();
			inactiveFields = (await Api.GetFields())
				.Where(f => f.IsActive)
				.OrderBy(f => f.DisplayOrder)
				.ToArray();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
