@page "/field/{Code}"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LoadingArtistCrowdSource.Shared.Models
@inject Services.LACSApi Api
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<Container Fluid="false">
	@if (!loaded)
	{
		<Spinner></Spinner>
	}
	else
	{
		@if (isNew)
		{
			<h3>New Field: @fieldDef.Name</h3>
		}
		else
		{
			<h3>Edit Field: @fieldDef.Name</h3>
		}

		<EditForm Model="fieldDef" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator />
			<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

			<div class="form-row">
				<div class="col-md-4">
					<FormCheckbox @bind-Value="fieldDef.IsActive"></FormCheckbox>
				</div>
				<div class="col-md-8">
					<FormTextfield @bind-Value="fieldDef.Code" Disabled="true"></FormTextfield>
				</div>
			</div>

			<FormTextfield @bind-Value="fieldDef.Name" @oninput="OnNameInput"></FormTextfield>

			<FormTextarea @bind-Value="fieldDef.ShortDescription"></FormTextarea>

			<FormTextarea @bind-Value="fieldDef.LongDescription"></FormTextarea>

			<FormSelect @bind-Value="fieldDef.Type">
				<SelectOptionsFromEnum Field="fieldDef.Type" IncludeEmpty="true"></SelectOptionsFromEnum>
			</FormSelect>

			@if (showOptions)
			{
				<div class="mb-3">
					<div class="d-flex mb-3">
						<h4>Options</h4>
						<div class="flex-fill"></div>
						<div>
							<Button Color="Color.Secondary" Clicked="HandleAddOption">
								<span class="oi oi-plus" aria-hidden="true"></span> Add
							</Button>
						</div>
					</div>

					<ListGroup>
						@for (int i = 0; i < fieldDef.Options.Count; i++)
						{
							var index = i;
							var option = fieldDef.Options[index];
							<ListGroupItem>
								<div class="d-flex w-100 justify-content-between align-items-start">
									<h5>@option.Text</h5>
									<div>
										<Button Outline="true" Color="Color.Secondary" Size="Size.Small" Class="flex-nowrap" Clicked="@(() => HandleEditOption(index))">
											<span class="oi oi-pencil" aria-hidden="true"></span> Edit
										</Button>
										<Button Outline="true" Color="Color.Danger" Size="Size.Small" Class="flex-nowrap" Clicked="@(() => HandleRemoveOption(index))">
											<span class="oi oi-trash" aria-hidden="true"></span> Delete
										</Button>
									</div>
								</div>
								<small class="text-muted">@option.Code</small>
								<p>@option.Description</p>
								@if (!string.IsNullOrEmpty(option.URL))
								{
									<NewTabLink Href="@option.URL">@option.URL</NewTabLink>
								}
							</ListGroupItem>
						}
					</ListGroup>
				</div>
			}

			<Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="isSubmitting">
				@if (isSubmitting)
				{
					<Spinner Inline="true" Small="true"></Spinner>
				}
				@if (isNew)
				{
					<text>Create</text>
				}
				else
				{
					<text>Update</text>
				}
			</Button>
			<Button Color="Color.Light" Clicked="HandleCancel">Cancel</Button>

		</EditForm>
	}
</Container>

<FieldOptionEditModal @ref="optionModal" OnSubmit="HandleFieldOptionModal"></FieldOptionEditModal>

@code {

	private static readonly Regex s_rgxCode = new Regex(@"[^a-zA-Z0-9\-]", RegexOptions.Compiled);

	[Parameter]
	public string Code { get; set; } = "";

	private bool loaded { get; set; } = true;
	private FieldDefinitionFormViewModel fieldDef { get; set; } = new FieldDefinitionFormViewModel();
	public bool isNew { get; set; } = true;
	public bool isSubmitting { get; set; } = false;
	private bool showOptions => FieldLogic.FieldTypeHasOptions(fieldDef.Type);
	private FieldOptionEditModal? optionModal { get; set; }
	private FieldOptionEditModal? editOptionModal { get; set; }
	private CrowdSourcedFieldDefinitionOptionViewModel editingFieldOption { get; set; } = new CrowdSourcedFieldDefinitionOptionViewModel();

	protected override async Task OnInitializedAsync()
	{
		if (Code == "new")
		{
			fieldDef = new FieldDefinitionFormViewModel()
			{
				IsNewField = true,
			};
			isNew = true;
		}
		else
		{
			isNew = false;
			try
			{
				loaded = false;
				fieldDef = await Api.GetField(Code);
				loaded = true;
			}
			catch (AccessTokenNotAvailableException exception)
			{
				exception.Redirect();
				return;
			}
		}
	}

	private void OnNameInput(ChangeEventArgs ev)
	{
		if (isNew)
		{
			fieldDef.Code = (ev.Value as string)!.ToLower().Replace(" ", "-");
			fieldDef.Code = s_rgxCode.Replace(fieldDef.Code, "");
		}
	}

	private void HandleAddOption()
	{
		optionModal?.Open(new FieldOptionEditModal.State()
		{
			OptionVM = new CrowdSourcedFieldDefinitionOptionViewModel(),
			Index = null,
		});
	}

	private void HandleEditOption(int index)
	{
		optionModal?.Open(new FieldOptionEditModal.State()
		{
			OptionVM = fieldDef.Options[index],
			Index = index,
		});
	}

	private void HandleRemoveOption(int index)
	{
		fieldDef.Options.RemoveAt(index);
	}

	private void HandleFieldOptionModal(FieldOptionEditModal.State state)
	{
		if (state.Index.HasValue)
		{
			fieldDef.Options[state.Index.Value] = state.OptionVM;
		}
		else
		{
			fieldDef.Options.Add(state.OptionVM);
		}
	}

	private async Task HandleValidSubmit()
	{
		isSubmitting = true;
		string? result;
		try
		{
			result = await Api.PutField(fieldDef);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
		isSubmitting = false;
		if (result == null)
		{
			NavigationManager.NavigateTo("/field");
			ToastService.ShowInfo($"The field {fieldDef.Name} was saved", "Success");
		}
		else
		{
			ToastService.ShowError($"There was a problem saving the Field: {result}", "Error");
		}
	}

	private void HandleCancel()
	{
		NavigationManager.NavigateTo("/field");
	}
}
