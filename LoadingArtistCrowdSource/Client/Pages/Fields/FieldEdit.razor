@page "/field/{Code}"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LoadingArtistCrowdSource.Shared.Models
@inject Services.LACSApi Api
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<Container Fluid="false">
	@if (!_loaded)
	{
		<Spinner></Spinner>
	}
	else
	{
		@if (_isNew)
		{
			<h3>New Field: @_fieldDef.Name</h3>
		}
		else
		{
			<h3>Edit Field: @_fieldDef.Name</h3>
		}

		<EditForm Model="_fieldDef" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator />
			<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

			<div class="form-row">
				<div class="col-md-4">
					<FormCheckbox @bind-Value="_fieldDef.IsActive"></FormCheckbox>
				</div>
				<div class="col-md-8">
					<FormTextfield @bind-Value="_fieldDef.Code" Disabled="true"></FormTextfield>
				</div>
			</div>

			<FormTextfield @bind-Value="_fieldDef.Name" @oninput="OnNameInput"></FormTextfield>

			<FormTextarea @bind-Value="_fieldDef.ShortDescription"></FormTextarea>

			<FormTextarea @bind-Value="_fieldDef.LongDescription"></FormTextarea>

			<FormSelect @bind-Value="_fieldDef.Type">
				<SelectOptionsFromEnum Field="_fieldDef.Type" IncludeEmpty="true"></SelectOptionsFromEnum>
			</FormSelect>

			@if (_showOptions)
			{
				<div class="mb-3">
					<div class="d-flex mb-3">
						<h4>Options</h4>
						<div class="flex-fill"></div>
						<div>
							<Button Color="Color.Secondary" Clicked="HandleAddOption">
								<HelperIcon Name="plus" /> Add
							</Button>
						</div>
					</div>

					<ListGroup ondragover="event.preventDefault();">
						@for (int i = 0; i < _fieldDef.Options.Count; i++)
						{
							var index = i;
							var option = _fieldDef.Options[index];
							<ListGroupItem draggable="true" @key="option.Code" @ondragstart="() => HandleDragStart(option)" @ondrop="() => HandleDragDrop(option)">
								<div class="d-flex flex-row align-items-center w-100">
									<div class="@($"grabbable mr-3 {(_draggingOption == option ? "active" : "")}")">
										<SemanticIcon Name="more-vertical" Title="Grab to drag and re-order" />
									</div>
									<div class="w-100">
										<div class="d-flex w-100 justify-content-between align-items-start">
											<div class="d-flex flex-column">
												<div>@option.Text</div>
												<small class="text-muted">@option.Code</small>
											</div>
											<div>
												<Button Outline="true" Color="Color.Secondary" Size="Size.Small" Class="flex-nowrap" Clicked="@(() => HandleEditOption(index))">
													<HelperIcon Name="edit" /> Edit
												</Button>
												<Button Outline="true" Color="Color.Danger" Size="Size.Small" Class="flex-nowrap" Clicked="@(() => HandleRemoveOption(index))">
													<HelperIcon Name="trash-2" /> Delete
												</Button>
											</div>
										</div>
										<p>@option.Description</p>
										@if (!string.IsNullOrEmpty(option.URL))
										{
											<NewTabLink Href="@option.URL">@option.URL</NewTabLink>
										}
									</div>
								</div>
								
							</ListGroupItem>
						}
					</ListGroup>
				</div>
			}

			<Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="_isSubmitting">
				@if (_isSubmitting)
				{
					<Spinner Inline="true" Small="true"></Spinner>
				}
				@if (_isNew)
				{
					<text>Create</text>
				}
				else
				{
					<text>Update</text>
				}
			</Button>
			<Button Color="Color.Light" Clicked="HandleCancel">Cancel</Button>

		</EditForm>
	}
</Container>

<FieldOptionEditModal @ref="_optionModal" OnSubmit="HandleFieldOptionModal"></FieldOptionEditModal>

@code {

	private static readonly Regex s_rgxCode = new Regex(@"[^a-zA-Z0-9\-]", RegexOptions.Compiled);

	[Parameter]
	public string Code { get; set; } = "";

	private bool _loaded = true;
	private FieldDefinitionFormViewModel _fieldDef = new FieldDefinitionFormViewModel();
	public bool _isNew = true;
	public bool _isSubmitting = false;
	private bool _showOptions => FieldLogic.FieldTypeHasOptions(_fieldDef.Type);
	private FieldOptionEditModal? _optionModal;
	private CrowdSourcedFieldDefinitionOptionViewModel? _draggingOption = null;


	protected override async Task OnInitializedAsync()
	{
		if (Code == "new")
		{
			_fieldDef = new FieldDefinitionFormViewModel()
			{
				IsNewField = true,
			};
			_isNew = true;
		}
		else
		{
			_isNew = false;
			try
			{
				_loaded = false;
				_fieldDef = await Api.GetField(Code);
				_loaded = true;
			}
			catch (AccessTokenNotAvailableException exception)
			{
				exception.Redirect();
				return;
			}
		}
	}

	private void OnNameInput(ChangeEventArgs ev)
	{
		if (_isNew)
		{
			_fieldDef.Code = (ev.Value as string)!.ToLower().Replace(" ", "-");
			_fieldDef.Code = s_rgxCode.Replace(_fieldDef.Code, "");
		}
	}

	#region Options and Modal
	private void HandleAddOption()
	{
		_optionModal?.Open(new FieldOptionEditModal.State()
		{
			OptionVM = new CrowdSourcedFieldDefinitionOptionViewModel(),
			Index = null,
		});
	}

	private void HandleEditOption(int index)
	{
		_optionModal?.Open(new FieldOptionEditModal.State()
		{
			OptionVM = _fieldDef.Options[index],
			Index = index,
		});
	}

	private void HandleRemoveOption(int index)
	{
		_fieldDef.Options.RemoveAt(index);
	}

	private void HandleFieldOptionModal(FieldOptionEditModal.State state)
	{
		if (state.Index.HasValue)
		{
			_fieldDef.Options[state.Index.Value] = state.OptionVM;
		}
		else
		{
			_fieldDef.Options.Add(state.OptionVM);
		}
	}
	#endregion Options and Modal

	private async Task HandleValidSubmit()
	{
		_isSubmitting = true;
		string? result;
		try
		{
			result = await Api.PutField(_fieldDef);
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
			return;
		}
		_isSubmitting = false;
		if (result == null)
		{
			NavigationManager.NavigateTo("/field");
			ToastService.ShowInfo($"The field {_fieldDef.Name} was saved", "Success");
		}
		else
		{
			ToastService.ShowError($"There was a problem saving the Field: {result}", "Error");
		}
	}

	private void HandleCancel()
	{
		NavigationManager.NavigateTo("/field");
	}

	#region Dragging
	protected void HandleDragStart(CrowdSourcedFieldDefinitionOptionViewModel option)
	{
		_draggingOption = option;
	}

	protected void HandleDragDrop(CrowdSourcedFieldDefinitionOptionViewModel option)
	{
		if (_draggingOption == null)
		{
			return;
		}
		if (option.Code == _draggingOption.Code)
		{
			_draggingOption = null;
			return;
		}

		var listOptions = _fieldDef.Options.ToList();
		var idxDragging = listOptions.IndexOf(_draggingOption);
		var idxDrop = listOptions.IndexOf(option);
		listOptions.RemoveAt(idxDragging);
		listOptions.Insert(idxDrop, _draggingOption);
		_fieldDef.Options = listOptions.ToList();

		_draggingOption = null;
	}
	#endregion Dragging
}
