@page "/statistics"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api

@if (_isLoading)
{
	<Spinner></Spinner>
}
else
{
	<Container>
		<Row>
			<Column>
				<h1>Statistics</h1>
			</Column>
		</Row>
		<Row>
			<Column ColumnSize="ColumnSize.Is6.OnDesktop" Class="mb-4">
				<Card Class="h-100">
					<CardHeader>
						Overall Webcomic Integrity
					</CardHeader>
					<CardBody>
						<label class="text-bold">
							2011 - 2021
						</label>
						<div class="progress mb-3" style="width: 100%; height: 22px;">
							<div class="progress-bar" role="progressbar" style="min-width: @(_overallIntegrity)%" aria-valuenow="@(_overallIntegrity)" aria-valuemin="0" aria-valuemax="100">
								@(_overallIntegrity)%
							</div>
						</div>
						<p>
							The overall webcomic integrity is a report on how helpful the data, 
							accrued so far, is for reports and searches. A low percentage indicates 
							that the data might not be useful just yet. Contributing to data fields 
							on comics will increase the percentage, improving the usefulness of this 
							website.
						</p>
						<p>
							The percentage is calculated by the sum of accrued "points," divided by 
							the total number of possible points. Collecting = 1 point, Accepted Answer 
							= 2 points, added Transcript = 1 point, any Tags = 1 point.
						</p>
					</CardBody>
				</Card>
			</Column>

			<Column ColumnSize="ColumnSize.Is6.OnDesktop" Class="mb-4">
				<Card Class="h-100">
					<CardHeader>
						Integrity by Year
					</CardHeader>
					<CardBody>
						@foreach (var year in _stats.IntegrityByYear.Keys)
						{
							int integrity = (int)Math.Floor(_stats.IntegrityByYear[year] * 100.0);
							<div class="d-flex flex-row flex-nowrap align-items-baseline">
								<label for="@($"stat-integrity-{year}")" class="mb-0 mr-3 font-weight-bold">@year</label>
								<div class="progress flex-grow-1" style="width: 100%; height: 22px;">
									<div class="progress-bar" role="progressbar" style="min-width: @(integrity)%" aria-valuenow="@(integrity)" aria-valuemin="0" aria-valuemax="100">
										@(integrity)%
									</div>
								</div>
							</div>
						}
					</CardBody>
				</Card>
			</Column>
		</Row>
		<Row>
			<Column>
				<Card>
					<CardHeader>
						Comic Integrity Queue
					</CardHeader>
					<CardBody>
						<p>
							These are the next comics that need some love and attention. Click on a comic and answer some fields to help contribute!
						</p>
						<div class="row">
							@foreach (var comic in _comicIntegrityQueue)
							{
								<div class="col-lg-2 col-md-3 col-sm-4 col-6 d-flex flex-column justify-content-end">
									<label class="w-100">
										<NavLink href="@($"/comic/{Uri.EscapeDataString(@comic.Code)}")" class="text-wrap">@comic.Title</NavLink>
										<div class="progress w-100">
											<div class="progress-bar" role="progressbar" style="min-width: @(comic.Integrity)%" aria-valuenow="@(comic.Integrity)" aria-valuemin="0" aria-valuemax="100">
												@(comic.Integrity)%
											</div>
										</div>
									</label>
								</div>
							}
						</div>
					</CardBody>
				</Card>
			</Column>
		</Row>
	</Container>
}

@code {
	private bool _isLoading;
	private StatisticsViewModel _stats = new StatisticsViewModel();
	private ComicListItemViewModel[] _comicIntegrityQueue { get; set; } = new ComicListItemViewModel[] { };

	private int _overallIntegrity => (int)Math.Floor(_stats.OverallIntegrity * 100.0);

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_isLoading = true;
			var statsTask = Api.GetStatistics();
			var integrityQueueTask = Api.GetComicIntegrityQueue();
			await Task.WhenAll(statsTask, integrityQueueTask);

			_stats = await statsTask;
			_comicIntegrityQueue = await integrityQueueTask;
			_isLoading = false;
		}
		catch (AccessTokenNotAvailableException ex)
		{
			ex.Redirect();
			return;
		}
		await base.OnInitializedAsync();
	}
}