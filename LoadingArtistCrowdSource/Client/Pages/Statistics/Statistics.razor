@page "/statistics"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject Services.LACSApi Api

@if (_isLoading)
{
	<Spinner></Spinner>
}
else
{
	<Container>
		<Row>
			<Column>
				<h1>Statistics</h1>
			</Column>
		</Row>
		<Row>
			<Column ColumnSize="ColumnSize.Is6.OnDesktop" Class="mb-4">
				<Card Class="h-100">
					<CardHeader>
						Overall Webcomic Integrity
					</CardHeader>
					<CardBody>
						<label class="text-bold">
							2011 - 2021
						</label>
						<Progress Class="mb-3">
							<ProgressBar Value="_overallIntegrity">
								@(_overallIntegrity)%
							</ProgressBar>
						</Progress>
						<p>
							The overall webcomic integrity is a report on how helpful the data, accrued so far, is for reports and searches. A low percentage indicates that the data might not be useful just yet. Contributing to data fields on comics will increase the percentage, improving the usefulness of this website.
						</p>
						<p>
							The percentage is calculated by the sum of accrued "points," divided by the total number of possible points. Collecting = 1 point, Accepted Answer = 2 points, added Transcript = 1 point, any Tags = 1 point.
						</p>
					</CardBody>
				</Card>
			</Column>

			<Column ColumnSize="ColumnSize.Is6.OnDesktop" Class="mb-4">
				<Card Class="h-100">
					<CardHeader>
						Integrity by Year
					</CardHeader>
					<CardBody>
						@foreach (var year in _stats.IntegrityByYear.Keys)
						{
							<div class="d-flex flex-row flex-nowrap align-items-baseline">
								<label for="@($"stat-integrity-{year}")" class="mb-0 mr-3 font-weight-bold">@year</label>
								<Progress id="@($"stat-integrity-{year}")" Class="flex-grow-1">
									<ProgressBar Value="(int)Math.Floor(_stats.IntegrityByYear[year] * 100.0)">
										@((int)Math.Floor(_stats.IntegrityByYear[year] * 100.0))%
									</ProgressBar>
								</Progress>
							</div>
						}
					</CardBody>
				</Card>
			</Column>
		</Row>
		<Row>
			<Column ColumnSize="ColumnSize.Is6.OnDesktop" Class="mb-4">
				<Card Class="h-100">
					<CardHeader>
						Test
					</CardHeader>
					<CardBody>
						
					</CardBody>
				</Card>
			</Column>
		</Row>
	</Container>
}

@code {
	private bool _isLoading;
	private StatisticsViewModel _stats = new StatisticsViewModel();

	private int _overallIntegrity => (int)Math.Floor(_stats.OverallIntegrity * 100.0);

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_isLoading = true;
			_stats = await Api.GetStatistics();
			_isLoading = false;
		}
		catch (AccessTokenNotAvailableException ex)
		{
			ex.Redirect();
			return;
		}
		await base.OnInitializedAsync();
	}
}