@using System.Linq
@using System.Reflection
@using System.ComponentModel
@using System.Linq.Expressions

@typeparam TField

<label for="@For" @attributes="AdditionalAttributes">@label</label>

@code {

	[Parameter]
	public Expression<Func<TField>>? ForField { get; set; }

	[Parameter]
	public string For { get; set; } = "";

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }

	private string label { get; set; } = "";

	protected override void OnInitialized()
	{
		base.OnInitialized();
		label = GetDisplayName();
	}

	private string GetDisplayName()
	{
		var expression = (MemberExpression)ForField!.Body;
		var value = expression.Member.GetCustomAttribute(typeof(DisplayNameAttribute)) as DisplayNameAttribute;
		return value?.DisplayName ?? expression.Member.Name ?? "";
	}

}