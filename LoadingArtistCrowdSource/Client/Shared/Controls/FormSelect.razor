@using System.Reflection
@using System.ComponentModel
@using System.Linq.Expressions

@typeparam TValue

<div class="form-group">
	<DisplayName For="@_memberName"
				 ForField="@ValueExpression"></DisplayName>

	<InputSelect id="@_memberName"
				 name="@_memberName"
				 class="custom-select"
				 disabled="@Disabled"
				 Value="@Value"
				 ValueChanged="@ValueChanged"
				 ValueExpression="@ValueExpression"
				 @attributes="AdditionalAttributes">
		@ChildContent
	</InputSelect>

	@if (!string.IsNullOrEmpty(_memberDescription))
	{
		<small class="form-text text-muted">@_memberDescription</small>
	}
</div>

@code {
	[Parameter]
	public string NamePrefix { get; set; } = "";
	[Parameter]
	public TValue Value { get; set; } = default!;
	[Parameter]
	public EventCallback<TValue> ValueChanged { get; set; }
	[Parameter]
	public Expression<Func<TValue>>? ValueExpression { get; set; }
	[Parameter]
	public bool Disabled { get; set; }
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	private string _memberName = "";
	private string _memberDescription = "";

	protected override void OnInitialized()
	{
		base.OnInitialized();
		_memberName = NamePrefix + Utilities.GetMemberName(ValueExpression!);
		_memberDescription = Utilities.GetDescriptionAttributeValue(ValueExpression!);
	}
}
