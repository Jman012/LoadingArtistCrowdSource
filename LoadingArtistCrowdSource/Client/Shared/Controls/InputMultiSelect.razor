@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JsRuntime
@inherits InputBase<string[]>

<select @ref="_selectRef" multiple class="@CssClass" @onchange="HandleChange" @attributes="AdditionalAttributes">
	@foreach (var option in Options)
	{
		<option value="@option.Key" selected="@(CurrentValue?.Contains(option.Key) ?? false)">@option.Value</option>
	}
</select>

@code {
	[Parameter]
	public KeyValuePair<string, string>[] Options { get; set; } = new KeyValuePair<string, string>[] { };

	private ElementReference? _selectRef { get; set; }

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string[] result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		result = new string[] { };
		validationErrorMessage = null;
		return true;
	}

	public async Task<List<string>> GetAllSelections()
	{
		return (await JsRuntime.InvokeAsync<List<string>>("getSelectedValues", _selectRef)).ToList();
	}

	private async Task HandleChange(ChangeEventArgs e)
	{
		List<string> localSelections = await GetAllSelections();
		CurrentValue = localSelections.ToArray();
	}
}
