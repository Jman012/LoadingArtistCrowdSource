// <auto-generated />
using System;
using LoadingArtistCrowdSource.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoadingArtistCrowdSource.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210125005718_Options")]
    partial class Options
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3acb17f1-65fe-4eac-bc2b-26403b23b999",
                            Email = "jman012guy@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "JMAN012GUY@GMAIL.COM",
                            NormalizedUserName = "JMAN012GUY@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC0UEVQAwZGMnlyB0JTaYYJNmy7dh9mEb0SxO/zihagNCfU6+HxVJrhPqx8qrpSbpA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jman012guy@gmail.com"
                        },
                        new
                        {
                            Id = "432ea055-ea01-443d-a6f7-e97d2c18d276",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3acb17f1-65fe-4eac-bc2b-26403b23b998",
                            Email = "jman012guy+1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "JMAN012GUY+1@GMAIL.COM",
                            NormalizedUserName = "JAMAMP1",
                            PasswordHash = "",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jamamp1"
                        },
                        new
                        {
                            Id = "432ea055-ea01-443d-a6f7-e97d2c18d277",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3acb17f1-65fe-4eac-bc2b-26403b23b997",
                            Email = "jman012guy+2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "JMAN012GUY+2@GMAIL.COM",
                            NormalizedUserName = "JAMAMP2",
                            PasswordHash = "",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jamamp2"
                        });
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.Comic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ComicPublishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrlSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrlSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageWideThumbnailUrlSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ImportedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tooltip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ImportedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Comic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "born",
                            ComicPublishedDate = new DateTimeOffset(new DateTime(2011, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            ImageThumbnailUrlSrc = "https://loadingartist.com/comic-thumbs/born.png",
                            ImageUrlSrc = "https://loadingartist.com/wp-content/uploads/2011/07/2011-01-04-born.png",
                            ImportedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            ImportedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 880, DateTimeKind.Unspecified).AddTicks(6222), new TimeSpan(0, -8, 0, 0, 0)),
                            Permalink = "https://loadingartist.com/comic/born/",
                            Title = "Born",
                            Tooltip = "Born"
                        });
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.ComicHistoryLog", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CrowdSourcedFieldDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LogDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComicId", "Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CrowdSourcedFieldDefinitionId");

                    b.ToTable("ComicHistoryLog");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("CrowdSourcedFieldDefinition");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            Code = "",
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(2300), new TimeSpan(0, -8, 0, 0, 0)),
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            LongDescription = "blah blah",
                            Name = "Panels",
                            ShortDescription = "The number of panels in the comic",
                            Type = "IntegerNumber"
                        },
                        new
                        {
                            Id = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            Code = "",
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(3572), new TimeSpan(0, -8, 0, 0, 0)),
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            LongDescription = "blah blah blah blah",
                            Name = "Characters",
                            ShortDescription = "Which characters are present in the comic",
                            Type = "FreeformTextfield"
                        });
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinitionFeedback", b =>
                {
                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompletionComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CompletionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CrowdSourcedFieldDefinitionId", "Id");

                    b.HasIndex("CompletedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CrowdSourcedFieldDefinitionFeedback");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinitionHistoryLog", b =>
                {
                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LogDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrowdSourcedFieldDefinitionId", "Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CrowdSourcedFieldDefinitionHistoryLog");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinitionOption", b =>
                {
                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrowdSourcedFieldDefinitionId", "Id");

                    b.ToTable("CrowdSourcedFieldDefinitionOption");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldUserEntry", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ComicId", "CrowdSourcedFieldDefinitionId", "CreatedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CrowdSourcedFieldDefinitionId");

                    b.ToTable("CrowdSourcedFieldUserEntry");

                    b.HasData(
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(4835), new TimeSpan(0, -8, 0, 0, 0)),
                            LastUpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d276",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(5174), new TimeSpan(0, -8, 0, 0, 0)),
                            LastUpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d277",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(5182), new TimeSpan(0, -8, 0, 0, 0)),
                            LastUpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(5185), new TimeSpan(0, -8, 0, 0, 0)),
                            LastUpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d276",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(5188), new TimeSpan(0, -8, 0, 0, 0)),
                            LastUpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d277",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(5191), new TimeSpan(0, -8, 0, 0, 0)),
                            LastUpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldUserEntryValue", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComicId", "CrowdSourcedFieldDefinitionId", "CreatedBy", "Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CrowdSourcedFieldDefinitionId");

                    b.ToTable("CrowdSourcedFieldUserEntryValue");

                    b.HasData(
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            Id = 0,
                            Value = "3"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d276",
                            Id = 0,
                            Value = "3"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d277",
                            Id = 0,
                            Value = "3"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            Id = 0,
                            Value = "Hat Guy"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d276",
                            Id = 0,
                            Value = "Hat Guy"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d277",
                            Id = 0,
                            Value = "Hat Guy"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            Id = 1,
                            Value = "Jes"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d276",
                            Id = 1,
                            Value = "Jes"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            CreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d277",
                            Id = 1,
                            Value = "Jes"
                        });
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldVerifiedEntry", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstCreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("VerificationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ComicId", "CrowdSourcedFieldDefinitionId");

                    b.HasIndex("CrowdSourcedFieldDefinitionId");

                    b.HasIndex("FirstCreatedBy");

                    b.ToTable("CrowdSourcedFieldVerifiedEntry");

                    b.HasData(
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            FirstCreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            VerificationDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(8356), new TimeSpan(0, -8, 0, 0, 0))
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            FirstCreatedBy = "432ea055-ea01-443d-a6f7-e97d2c18d275",
                            VerificationDate = new DateTimeOffset(new DateTime(2021, 1, 24, 16, 57, 17, 882, DateTimeKind.Unspecified).AddTicks(8630), new TimeSpan(0, -8, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldVerifiedEntryValue", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<Guid>("CrowdSourcedFieldDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComicId", "CrowdSourcedFieldDefinitionId", "Id");

                    b.HasIndex("CrowdSourcedFieldDefinitionId");

                    b.ToTable("CrowdSourcedFieldVerifiedEntryValue");

                    b.HasData(
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("3cf9e9b9-ba40-40dc-b6e7-82238bb40b49"),
                            Id = 0,
                            Value = "3"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            Id = 0,
                            Value = "Blue"
                        },
                        new
                        {
                            ComicId = 1,
                            CrowdSourcedFieldDefinitionId = new Guid("9285e024-af5e-40e7-b1ea-52bf35481bf0"),
                            Id = 1,
                            Value = "Hat Guy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.Comic", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "ImportedByUser")
                        .WithMany("ComicsImported")
                        .HasForeignKey("ImportedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany("ComicsLastUpdated")
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ImportedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.ComicHistoryLog", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.Comic", "Comic")
                        .WithMany("ComicHistoryLogs")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("ComicHistoryLogsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("ComicHistoryLogs")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CrowdSourcedFieldDefinition");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CrowdSourcedFieldDefinitionsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany("CrowdSourcedFieldDefinitionsLastUpdated")
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinitionFeedback", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CompletedByUser")
                        .WithMany("CrowdSourcedFieldDefinitionFeedbacksCompleted")
                        .HasForeignKey("CompletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CrowdSourcedFieldDefinitionFeedbacksCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldDefinitionFeedbacks")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompletedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CrowdSourcedFieldDefinition");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinitionHistoryLog", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CrowdSourcedFieldDefinitionHistoryLogsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldDefinitionHistoryLogs")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("CrowdSourcedFieldDefinition");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinitionOption", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldDefinitionOptions")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CrowdSourcedFieldDefinition");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldUserEntry", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.Comic", "Comic")
                        .WithMany("CrowdSourcedFieldUserEntries")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CrowdSourcedFieldUserEntriesCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldUserEntries")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CrowdSourcedFieldDefinition");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldUserEntryValue", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.Comic", "Comic")
                        .WithMany("CrowdSourcedFieldUserEntryValues")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CrowdSourcedFieldUserEntryValuesCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldUserEntryValues")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldUserEntry", "CrowdSourcedFieldUserEntry")
                        .WithMany("CrowdSourcedFieldUserEntryValues")
                        .HasForeignKey("ComicId", "CrowdSourcedFieldDefinitionId", "CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CrowdSourcedFieldDefinition");

                    b.Navigation("CrowdSourcedFieldUserEntry");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldVerifiedEntry", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.Comic", "Comic")
                        .WithMany("CrowdSourcedFieldVerifiedEntries")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldVerifiedEntries")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", "FirstCreatedByUser")
                        .WithMany("CrowdSourcedFieldVerifiedEntriesFirstCreated")
                        .HasForeignKey("FirstCreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("CrowdSourcedFieldDefinition");

                    b.Navigation("FirstCreatedByUser");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldVerifiedEntryValue", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.Comic", "Comic")
                        .WithMany("CrowdSourcedFieldVerifiedEntryValues")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", "CrowdSourcedFieldDefinition")
                        .WithMany("CrowdSourcedFieldVerifiedEntryValues")
                        .HasForeignKey("CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldVerifiedEntry", "CrowdSourcedFieldVerifiedEntry")
                        .WithMany("CrowdSourcedFieldVerifiedEntryValues")
                        .HasForeignKey("ComicId", "CrowdSourcedFieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("CrowdSourcedFieldDefinition");

                    b.Navigation("CrowdSourcedFieldVerifiedEntry");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LoadingArtistCrowdSource.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("ComicHistoryLogsCreated");

                    b.Navigation("ComicsImported");

                    b.Navigation("ComicsLastUpdated");

                    b.Navigation("CrowdSourcedFieldDefinitionFeedbacksCompleted");

                    b.Navigation("CrowdSourcedFieldDefinitionFeedbacksCreated");

                    b.Navigation("CrowdSourcedFieldDefinitionHistoryLogsCreated");

                    b.Navigation("CrowdSourcedFieldDefinitionsCreated");

                    b.Navigation("CrowdSourcedFieldDefinitionsLastUpdated");

                    b.Navigation("CrowdSourcedFieldUserEntriesCreated");

                    b.Navigation("CrowdSourcedFieldUserEntryValuesCreated");

                    b.Navigation("CrowdSourcedFieldVerifiedEntriesFirstCreated");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.Comic", b =>
                {
                    b.Navigation("ComicHistoryLogs");

                    b.Navigation("CrowdSourcedFieldUserEntries");

                    b.Navigation("CrowdSourcedFieldUserEntryValues");

                    b.Navigation("CrowdSourcedFieldVerifiedEntries");

                    b.Navigation("CrowdSourcedFieldVerifiedEntryValues");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldDefinition", b =>
                {
                    b.Navigation("ComicHistoryLogs");

                    b.Navigation("CrowdSourcedFieldDefinitionFeedbacks");

                    b.Navigation("CrowdSourcedFieldDefinitionHistoryLogs");

                    b.Navigation("CrowdSourcedFieldDefinitionOptions");

                    b.Navigation("CrowdSourcedFieldUserEntries");

                    b.Navigation("CrowdSourcedFieldUserEntryValues");

                    b.Navigation("CrowdSourcedFieldVerifiedEntries");

                    b.Navigation("CrowdSourcedFieldVerifiedEntryValues");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldUserEntry", b =>
                {
                    b.Navigation("CrowdSourcedFieldUserEntryValues");
                });

            modelBuilder.Entity("LoadingArtistCrowdSource.Server.Models.CrowdSourcedFieldVerifiedEntry", b =>
                {
                    b.Navigation("CrowdSourcedFieldVerifiedEntryValues");
                });
#pragma warning restore 612, 618
        }
    }
}
